<?xml version='1.0' encoding='utf-8'?>

<chapter xml:id="ch-diagonalization" xmlns:xi="http://www.w3.org/2001/XInclude">
   <title>Diagonalization</title>
  <objectives>
    In this chapter you will learn:
     <ol>
       <li>Hibert's Hotel </li>
        <li>Introduction to Diagonalization </li>
        <li>Examples of Turing Machines </li>
        <li>The Halting Problem </li>
     </ol>
  </objectives>
  <section xml:id="sec-hiblertshotel">
    <title>Hilbert's Hotel</title>
    <p>
      Diagonalization is a concept best explained through example. For this we will look at Hilbert and his hotel or <idx>Hilbert's Hotel</idx> 
      <term>Hilbert's Hotel.</term>
    </p>
    <p>
      Consider Hilbert who owns a fancy hotel that can fit an infinite amount of people and the rooms are all occupied. The rooms are numbered starting at 1. 
    </p>
    <image source="../generated/latex-image/TM-Hil1.svg" width='50%'>
	  </image>
    <p>
      A vistior comes up to Hiblert and requests to stay for the night.
    </p>
     <image source="../generated/latex-image/TM-Hil2.svg" width='50%'>
	  </image>
    <p>
      Another patron comes up to Hilbert and asks to stay, as he has an infinite amount of rooms, he can accomodate this request. 
    </p>
    <image source="../generated/latex-image/TM-Hil3.svg" width='50%'>
	  </image>
    
    <p>
      To add the new patron to his hotel, Hilbert shifts all of his current guests down a room. 
    </p>
    <image source="../generated/latex-image/TM-Hil4.svg" width='50%'>
	  </image>
    
    <p>
      Since Hilbert has an infinite amount of rooms, this process of adding a visitor can occur an infinite amount of times. 
      But, what happens when a bus with an infinite amount of passengers arrives? To help with the visualization, try numbering the patrons already in rooms.
    </p>
    <image source="../generated/latex-image/TM-Hil5.svg" width='50%'>
	  </image>
    <p>
      Consider how the rooms are labeled using the counting numbers:
      <me>
        \mbox{Counting Numbers} = \{1,2,3,4,...\}
      </me>
      and the patrons currently residing in the rooms correspond to the natural numbers:
      <me>
        \mathbb{N} = \{0,1,2,3,...\}
      </me>
      What set would this make with the infinite amount of bus patrons joining the hotel? What would this look like in from a "folding" pattern? The bus patrons are numbered -1, -2, and onwards.
      This is the set of integers.
      <me>
        \mathbb{Z} = \{0,-1,1,-2,2,-3,3,...\}
      </me>
      There is a one-to-one correspondance among the sets. 
      <tabular>
        <row>
          <cell>Counting: </cell><cell>=</cell><cell>{</cell><cell>1,</cell><cell>2,</cell><cell>3,</cell><cell>4,</cell><cell>5,</cell><cell>...}</cell>
        </row>
        <row>
          <cell></cell><cell></cell><cell></cell><cell><m>\downarrow</m></cell><cell><m>\downarrow</m></cell><cell><m>\downarrow</m></cell><cell><m>\downarrow</m></cell><cell><m>\downarrow</m></cell><cell></cell>
        </row>
        <row>
          <cell halign='right'><m>\mathbb{N}</m>:</cell><cell>=</cell><cell>{</cell><cell>0,</cell><cell>1,</cell><cell>2,</cell><cell>3,</cell><cell>4,</cell><cell>...}</cell>
        </row>
        <row>
          <cell></cell><cell></cell><cell></cell><cell><m>\downarrow</m></cell><cell><m>\downarrow</m></cell><cell><m>\downarrow</m></cell><cell><m>\downarrow</m></cell><cell><m>\downarrow</m></cell><cell></cell>
        </row>
        <row>
          <cell halign='right'><m>\mathbb{Z}</m>:</cell><cell>=</cell><cell>{</cell><cell>0,</cell><cell>-1,</cell><cell>1,</cell><cell>-2,</cell><cell>2,</cell><cell>...}</cell>
        </row>
      </tabular>
      But, how would this look in Hilbert's Hotel?
    </p>
    <image source="../generated/latex-image/TM-Hil6.svg" width='60%'>
	  </image>
    <p>
      Could we ever prove that more patrons arrived on the bus than were in the hotel already?
    </p>
  </section>
  <section xml:id="sec-introtodiagonalization">
    <title>Introduction to Diagonalization</title>
    <p>
      Consider what would happen if we tried to represent the entire set of real numbers in Hilbert's Hotel. What would the patrons look like? As a reminder: 
      <me>
        \mathbb{R} = \{0,0.1,0.001,0.23, 5.4903,...\}
      </me>
      What would happen if was just the set of real numbers between 0 and 1?
      <me>
        \mathbb{R} = \{0,0.01,0.001,0.0001,...\}
      </me>
      Is there a better was to list the elements of this set out? Consider changing just one element at a times.
      <tabular>
        <row>
          <cell>1:</cell><cell>0.</cell><cell>1</cell><cell>0</cell><cell>0</cell><cell>0</cell><cell>...</cell>
        </row>
        <row>
          <cell>2:</cell><cell>0.</cell><cell>1</cell><cell>1</cell><cell>0</cell><cell>0</cell><cell>...</cell>
        </row>
        <row>
          <cell>3:</cell><cell>0.</cell><cell>1</cell><cell>1</cell><cell>1</cell><cell>0</cell><cell>...</cell>
        </row>
        <row>
          <cell>4:</cell><cell>0.</cell><cell>1</cell><cell>1</cell><cell>1</cell><cell>1</cell><cell>...</cell>
        </row>
      </tabular>
      Considering only one number changed each time, we know that there are each unique elements of the set. This thinking can be referred to as 
      <idx>Diagonalization</idx> <term>diagonalization</term>, and it can be used not only to build sets but also to ensure that each element
      is unique.
    </p>
    <p>
      This is particularly relevant in TMs as the process can be used to prove that a new machine that you create accepts a langugae that is different from
      the languages of all other machines. We will look at another finite example below, but this conecept only truly works when there are an infinite
      amount of machines. 
    </p>
    <p>
        As mentioned earlier, TMs get more excited when we start passing them as input. Consider the output chart below where an array of TMs <m>[M_i]</m>
        are passed into eachother and themselves. If it is decidable, then the machine will either Accept (<m>A</m>) or Reject (<m>R</m>).
      </p>
      <tabular>
        <row>
          <cell bottom="minor"></cell><cell bottom="minor" right="minor"></cell><cell bottom="minor" right="minor"><m>M_1</m></cell>
          <cell bottom="minor" right="minor"><m>M_2</m></cell><cell bottom="minor" right="minor"><m>M_3</m></cell><cell bottom="minor" ><m>M_4</m></cell>
          <cell bottom="minor">...</cell>
        </row>
        <row>
          <cell><m>TM</m></cell><cell right="minor"><m>M_1</m></cell><cell right="minor"><m>A</m></cell>
          <cell right="minor"><m>A</m></cell><cell right="minor"><m>A</m></cell><cell><m>A</m></cell>
          <cell>...</cell>
        </row>
        <row>
          <cell><m></m></cell><cell right="minor"><m>M_2</m></cell><cell right="minor"><m>R</m></cell>
          <cell right="minor"><m>R</m></cell><cell right="minor"><m>R</m></cell><cell><m>R</m></cell>
          <cell>...</cell>
        </row>
        <row>
          <cell><m></m></cell><cell right="minor"><m>M_3</m></cell><cell right="minor"><m>A</m></cell>
          <cell right="minor"><m>R</m></cell><cell right="minor"><m>A</m></cell><cell><m>R</m></cell>
          <cell>...</cell>
        </row>
        <row>
          <cell><m></m></cell><cell right="minor"><m>M_4</m></cell><cell right="minor"><m>A</m></cell>
          <cell right="minor"><m>A</m></cell><cell right="minor"><m>A</m></cell><cell><m>A</m></cell>
          <cell>...</cell>
        </row>
        <row>
          <cell><m></m></cell><cell right="minor"><m>M_5</m></cell><cell right="minor"><m>A</m></cell>
          <cell right="minor"><m>A</m></cell><cell right="minor"><m>A</m></cell><cell><m>A</m></cell>
          <cell>...</cell>
        </row>
        <row>
          <cell bottom="minor"><m></m></cell><cell bottom="minor" right="minor"><m></m></cell><cell bottom="minor" right="minor"><m></m></cell>
          <cell bottom="minor" right="minor"><m></m></cell><cell bottom="minor" right="minor"><m></m></cell><cell bottom="minor"><m></m></cell>
          <cell bottom="minor"></cell>
        </row>
        <row>
          <cell></cell><cell right="minor"></cell><cell right="minor"></cell>
          <cell right="minor"></cell><cell right="minor"></cell><cell></cell>
          <cell></cell>
        </row>
        <row>
          <cell><m></m></cell><cell  right="minor"><m>M_?</m></cell><cell right="minor"><m>R</m></cell>
          <cell right="minor"><m>A</m></cell><cell right="minor"><m>R</m></cell><cell><m>R</m></cell>
          <cell>...</cell>
        </row>
        <row>
          <cell><m></m></cell><cell  right="minor"><m>{M_?}_2</m></cell><cell right="minor"><m>A</m></cell>
          <cell right="minor"><m>R</m></cell><cell right="minor"><m>R</m></cell><cell><m>A</m></cell>
          <cell>...</cell>
        </row>
      </tabular>
  </section>
  <section xml:id="sec-ExTM">
    <title>Examples of Turing Machines</title>
      <subsection xml:id="subsec-ATM">
        <title>Acceptance Turing Machine</title>
        <p>
        There are different types of information that can be deduced from a TM's classification. 
          <ul>
            <li>
              <p>
                If a language,<m>L</m>, is <m>T_d</m>, then <m>\bar{L}</m> is <m>T_d</m>.
              </p>
            </li>
            </ul>
            </p>
            <image source="../generated/latex-image/TM-ATM2.svg" width='60%'>
        </image>
            <p>
            <ul>
            <li>
              <p>
                If a language,<m>L</m>, is <m>T_r</m> and not <m>T_d</m>, then <m>\bar{L}</m> is not <m>T_r</m>.
              </p>
            </li>
            </ul>
            <ul>
            <li>
              <p>
                If a language,<m>L</m>, is <m>T_r</m> and <m>\bar{L}</m> is <m>T_r</m>, then <m>L</m> and <m>\bar{L}</m> are both <m>T_d</m>. 
              </p>
            </li>
          </ul>
        </p>
         <image source="../generated/latex-image/TM-ATM1.svg" width='60%'>
        </image>
        <p>
          All of this is to say that there may exist a language where neither it nor its compliment are Turing Reconidable.
        </p>
        <image source="../generated/latex-image/TM-VennDiagram3.svg" width='60%'>
        </image>
        <p>
          Consider is an input <m>w</m> was given to a machine that runs with different machines at the same time. The overall output depends on the final state of the 
        machine.
        </p>
        <p>
          The Acceptance Turing Machine is a set of pairs of machines and inputs where the machine accepts the input. In other words:
          <me>
            A_{TM} = \{ \langle M,w \rangle | M \mbox{ is a TM and } M \mbox{ accepts } w \}
          </me>
          Here, you get the input and break it into the machine,<m>M</m>, and the input,<m>w</m>. Then, you simulate <m>M</m> as a TM running on <m>w</m>. 
          If <m>M</m> accepts, then the <m>A_{TM}</m> accepts. If the <m>M</m> rejects, then the <m>A_{TM}</m> rejects. 
        </p>
        <p>
          The <m>A_{TM}</m> is a Turing decidable.
        </p>
      </subsection>
      <subsection xml:id="subsec-otherTM">
        <title>Other Turing Machines</title>
          <p>
            There are other speciality types of TMs as well. 
            <ul>
              <li>
                <p>
                  The Regular<m>_{TM}</m> is an undecidable machine that accepts when the language of a input machine is regular. 
                  <me>
                    \mbox{Regular}_{TM} = \{\langle M\rangle | L(M) \mbox{ is regular} \}
                  </me>
                </p>
              </li>
              <li>
                <p>
                  The Tape<m>_{TM}</m> is an undecidable machine that writes an "a" to the given tape.
                  <me>
                    \mbox{Tape}_{TM} = \{\langle M\rangle | M \mbox{ writes and "a" to the tape}\}
                  </me>
                </p>
              </li>
              <li>
                <p>
                  The S<m>_{TM}</m>. 
                  <me>
                    S_{TM} = \{ \langle M \rangle | M \mbox{ does not accept } M \}
                  </me>
                </p>
              </li>
            </ul>
          </p>
      </subsection>
      
  </section>
  <section xml:id="sec-halting">
    <title>The Halting Problem</title>
    <p>
      We cannot tell if a TM will halt on a given input, making Turing Machines not decideable. This is represented by <m>H_{TM}</m>.
    </p>
    
  </section>
  <exercises>
    <exercise>
      <statement>
        <p>
          The self-denying paradox is an example of a language that is not Tr because of the paradox. The machine built for this
          language cannot halt when running with itself as input. The complement of this paradox would be th set of machines that 
          accept themselves as input. To craft this language, we could take our list of TMs and TMs as input and make a TM that 
          does what that machine does on its own input (making a trace along the diagonal).
        </p>
        <p>
          Would this new machine accept itself when receiving itself as input? Explain. Is it possible for this machine to have 
          already appeared? Explain.
        </p>
        <tabular>
        <row>
          <cell bottom="minor"></cell><cell bottom="minor" right="minor"></cell><cell bottom="minor" right="minor"><m>M_1</m></cell>
          <cell bottom="minor" right="minor"><m>M_2</m></cell><cell bottom="minor" right="minor"><m>M_3</m></cell>
          <cell bottom="minor">...</cell>
        </row>
        <row>
          <cell><m>TM</m></cell><cell right="minor"><m>M_1</m></cell><cell right="minor"><m>A</m></cell>
          <cell right="minor"><m>A</m></cell><cell right="minor"><m>A</m></cell>
          <cell>...</cell>
        </row>
        <row>
          <cell><m></m></cell><cell right="minor"><m>M_2</m></cell><cell right="minor"><m>R</m></cell>
          <cell right="minor"><m>R</m></cell><cell right="minor"><m>R</m></cell>
          <cell>...</cell>
        </row>
        <row>
          <cell><m></m></cell><cell right="minor"><m>M_3</m></cell><cell right="minor"><m>A</m></cell>
          <cell right="minor"><m>A</m></cell><cell right="minor"><m>A</m></cell>
          <cell>...</cell>
        </row>
        <row>
          <cell><m></m></cell><cell ><m>...</m></cell><cell ><m></m></cell>
          <cell ><m></m></cell><cell ><m></m></cell>
          <cell></cell>
        </row>
        
        
      </tabular>
      </statement>
    </exercise>
    <exercise>
      <statement>
        <p>
          The self-denying paradox is an example of a languge that is not Tr because of the paradox. 
          The machine built for this language cannot halt when running with itself as input. 
        </p>
        <me>
          L = \{\langle M, w \rangle | M \mbox{ is a Tm that moves the head on input } w\}
        </me>
        
        <p>
          Assume the language above is decidable and use the chart below. Use diagonalization. 
          Describe the language of this new machine and it's paradox. 
        </p>
        <tabular>
        <row>
          <cell bottom="minor"></cell><cell bottom="minor" right="minor"></cell><cell bottom="minor" right="minor"><m>M_1</m></cell>
          <cell bottom="minor" right="minor"><m>M_2</m></cell><cell bottom="minor" right="minor"><m>M_3</m></cell>
          <cell bottom="minor">...</cell>
        </row>
        <row>
          <cell><m>TM</m></cell><cell right="minor"><m>M_1</m></cell><cell right="minor"><m>A</m></cell>
          <cell right="minor"><m>A</m></cell><cell right="minor"><m>A</m></cell>
          <cell>...</cell>
        </row>
        <row>
          <cell><m></m></cell><cell right="minor"><m>M_2</m></cell><cell right="minor"><m>R</m></cell>
          <cell right="minor"><m>R</m></cell><cell right="minor"><m>R</m></cell>
          <cell>...</cell>
        </row>
        <row>
          <cell><m></m></cell><cell right="minor"><m>M_3</m></cell><cell right="minor"><m>A</m></cell>
          <cell right="minor"><m>A</m></cell><cell right="minor"><m>A</m></cell>
          <cell>...</cell>
        </row>
        <row>
          <cell><m></m></cell><cell ><m>...</m></cell><cell ><m></m></cell>
          <cell ><m></m></cell><cell ><m></m></cell>
          <cell></cell>
        </row>
      </tabular>
      </statement>
    </exercise>
    <exercise>
      <statement>
        <p>
          Describe the halting problem. Is it Td, Tr, or neither? 
        </p>
      </statement>
      <hint>
        <p>
          This designation is important because of its impact on all of computer programming.)
        </p>
      </hint>
    </exercise>
    <exercise>
      <statement>
        <p>
          Rice's Theorem applies to program meaning. It is undecidable if a program will ever negate a 
          variable, for example. But, I could write a print statement around this negation to determine
          if it runs, why isn't this then a decider?
        </p>
      </statement>
    </exercise>
  </exercises>
    <!--
  <xi:include href=".sec-emp-intro.ptx" />
  <xi:include href=".sec-emp-next.ptx" />
  <xi:include href=".sec-emp-conc.ptx" /> 
  -->

</chapter>
