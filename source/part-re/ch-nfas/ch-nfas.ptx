<?xml version='1.0' encoding='utf-8'?>

<chapter xml:id="ch-nfas" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Non-determinsitic Finite Automata</title>
  <objectives>
    In this chapter you will learn:
     <ol>
       <li> Non-Deterministic Finite Automata (NFA) </li>
       <li> Parallelism </li>
       <li> The Power Set </li>
       <li> Strengths of NFAs </li>
     </ol>
  </objectives>
  <section xml:id="NFAs">
      <title>Non-Deterministic Finite Automata (NFA)</title>
        <p><idx>Non-Deterministic Finitie Automata (NFA)</idx> <term> Non-Determinisitic Finite Automatas (DFA)</term> are FAs where the outcome of each possible change 
          of state is not completely determined (see the root words at work here). Some quick examples include, a state that transitions to two other states on 
          an input, thus leaving you in multiple states. A state where a transition is not defined, thus ejecting you from the machine. We will even allow
          free jumps to new states.
        <exploration>
          <p>
            Consider <m>M_8</m>. <m>\Sigma(M_8)=\{x, y\}</m>
            </p>
            <p>
            <image source="../generated/latex-image/FAExM8.svg" width="50%"></image>
            What is the language of <m>M_8</m> (<m>L(M_8)</m>)?
            <hint>
              <p>
                Despite being in the alphabet, <m>y</m> does not appear in the FA. What could this mean for the language?
              </p>
            </hint>
            <answer>
              <p>
                <m>L(M_8) =</m> any string with two or more <m>x</m>s and no <m>y</m>s.
              </p>
            </answer>
          </p>
        </exploration>
       </p>
       
   </section>
   
   <section xml:id="Parallelism">
    <title>Parallelism</title>
      <p>
        NFAs make it possible to exist in two states at once. You might think of this as <idx>Parallelism</idx> <term>parallelism</term>.
        Parallelism can occur because a state has multiple paths for the same character. It can also happen because of an <idx>Empty String Transition</idx>
        <term>empty string transition</term>. Empty string transitions are free jumps to another state. Sometimes these multiple paths and free jumps are called guesses
        when discussing FAs. Only one execution path must lead to an accept, to accept a string in these conditions.
      </p>
      <p>
        <m>M_9</m> is an example of parallelism caused by a character having two defined paths from the same state. Both states <m>B</m> and 
        <m>D</m> would be active if the first character of the given string was 1. 
      </p>
      <image source="../generated/latex-image/FAExM9.svg" width="50%">
	  </image>
      <p>
        There are two strategies for tracking which states you are in. The first is quite simple, track them with your fingers. The second,
        is to create a transition table similar to that in <xref ref="DFADeterminismTable"></xref>.
      </p> 
        <table xml:id="NFADeterminismTable">
          <title>Determinism Chart for <m>M_1</m></title>
            <tabular>
              <row header="yes"><cell right="medium" bottom ="minor"> </cell><cell bottom ="minor">1</cell><cell bottom ="minor">0</cell></row>
              <row header="no"><cell right="medium"><m>Q_0</m></cell><cell><m>\{Q_1,Q_3\}</m></cell><cell><m>\emptyset</m></cell></row>
              <row header="no"><cell right="medium"><m>Q_1</m></cell><cell><m>\{Q_1\}</m></cell><cell><m>\{C\}</m></cell></row>
              <row header="no"><cell right="medium"><m>Q_2</m></cell><cell><m>\emptyset</m></cell><cell><m>\emptyset</m></cell></row>
              <row header="no"><cell right="medium"><m>Q_3</m></cell><cell><m>\{Q_4\}</m></cell><cell><m>\{Q_3\}</m></cell></row>
              <row header="no"><cell right="medium"><m>Q_4</m></cell><cell><m>\{Q_4\}</m></cell><cell><m>\{Q_4\}</m></cell></row>
            </tabular>
        </table>
      <p>
        <m>M_{10}</m> contains an example of an NFA caused by an empty string transition. When processing a string like "bba" we might start by tracking with our fingers. 
        They start in <m>Q_0</m> but quickly we see we exist in <m>Q_1</m> and <m>Q_6</m> as well. When the first "b" is read, we fall off the first two states and move from 
        <m>Q_6</m> to <m>Q_7</m>. To track this with a computer, given the knowledge we have so far, we would have to use some form of guess and check with backtracking (like a depth-first search) 
        or we could create children processes to handle the different traces to run things in parallel. What a conundrum! Let us see if we can do something about that in the future.
      </p>
      <image source="../generated/latex-image/FAExM10.svg" width="50%">
	    </image>
   </section>
   <section xml:id="PowerSet">
    <title>The Power Set</title>
      <p>
        The <idx>Power Set (P)</idx> <term>power set (P)</term> is the set of all subsets of the given states. It also includes <m>\emptyset</m>. 
      </p>
      <p>
        The power set will have as many sets in it as <m>2^n</m> with <m>n</m> being the number of states in the machine. The power set for a generic 
        machice with states <m>Q_0</m>, <m>Q_1</m>, and <m>Q_2</m>. Would look like this:
      </p>
      <image source="../generated/latex-image/PowerSetMatx.svg" width="50%">
	    </image>
      Since we might think about NFAs as the ability to exist in multiple states, the power set is a useful tool. If we trace our way through an NFA, we'll end up in some set of states. That will correspond to one of the entries in the power set. That's a useful idea that we'll use in just a moment.
      
   </section>
   <section xml:id="StrengthsofNFAs">
    <title>Strengths of NFAs</title>
    <p>
      NFAs are often pretty easy to generate for languages that include a certain set of characters. Such as:
      <ul>
        <li><em>Begins with </em> 01</li>
        <li><em>Contains </em> 01 </li>
        <li><em>Ends with </em> 01 </li>
      </ul>
    </p>
     Some of these are not so hard for DFAs but, as we work with things we find that the shortcuts of NFAs allow us to write the machines for such languages more quickly.
     When your language includes an "or" in its description, it turns out that's also perfect for an NFA. Since we can make guesses, we can build a machine for each side of the "or"
     and push them together with empty string transitions. Looking back at <m>M_{10}</m>, we might describe this language with an "or". We take
     either the top path or the bottom path. The language then must be all strings that are "aab" or that begin with "bb" followed by any number of a's. 
   </section>

  <exercises>
    <exercise>
      <statement>
        <p>
          Build a NFA for the following language where <m>\Sigma(L_{11}) = \{0, 1\}</m>:
          <me>L_{11} = \mbox{any string that contains 01}</me>
        </p>
      </statement>
      <answer>
        <image source="../generated/latex-image/FAExM11.svg" width="50%">
	      </image>
      </answer>
    </exercise>
    <exercise>
      <statement>
        <p>
          The maximum size of the power set is <m>2^n</m> where <m>n</m> is the number of 
          states in the machine. Where does this come from?
        </p>
      </statement>
      <hint>
        <p>
          There is always a choice to be in a state or not.
        </p>
      </hint>
      <answer>
        <p>
          There are two choices with each state, whether to be in it or to not be in it. This means that there 
          are two options for each state, making the maximum size of the power set <m>2^n</m>. 
        </p>
      </answer>
    </exercise>
    <exercise>
      <statement>
        <p>
          Create a power set for a FA with the following states: <m>A</m>, <m>B</m>, <m>C</m>, and <m>D</m>.
        </p>
      </statement>
      <answer>
        <p>
          <image source="../generated/latex-image/PowerSetMatx2.svg" width="50%">
	        </image>
        </p>
      </answer>
    </exercise>
    <exercise>
      <statement>
        <p>
          Craft a FA from this English description. 
        </p>
        <p>
          All strings that begin with a 0, end with a 0, and may contain any number of other <m>0</m>s and <m>1</m>s. Assume <m>\Sigma=\{0,1\}</m>.
        </p>
      </statement>
      <answer>
        <image source="../generated/latex-image/FAExM28.svg" width="50%">
        </image>
      </answer>
    </exercise>
    <exercise>
      <statement>
        <p>
          Craft a FA from this English description:
        </p>
        <m>L = \mbox{\{The language that begins with either } 001 \mbox{ or } 10 \mbox{. It may contain any other number of } 0\mbox{s and }1\mbox{s.\}}</m>
      </statement>
    </exercise>
    <exercise>
      <statement>
        <p>
          Construct a FA from this English description. Assume <m>\Sigma=\{0,1\}</m>.
        </p>
        <me>
          L = \mbox{\{The language has an even number of }0\mbox{s and ends in }11\mbox{. It may contain any other number of }0\mbox{s and }1\mbox{s.\}}
        </me>
        
      </statement>
    </exercise>
    <exercise>
      <statement>
        <p>
          The language that consists of all strings that contain 101.
        </p>
      </statement>
    </exercise>
    <exercise>
      <statement>
        <p>
          Give a FA of the following English description of a language with the alphabet, <m>\Sigma = \{1,3,7\}</m>: 

        </p>
        <p>
          The language consists of all strings that contain 1337.
        </p>
      </statement>
    </exercise>
  </exercises>
    <!--
  <xi:include href=".sec-emp-intro.ptx" />
  <xi:include href=".sec-emp-next.ptx" />
  <xi:include href=".sec-emp-conc.ptx" /> 
  -->

</chapter>
