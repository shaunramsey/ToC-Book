<?xml version='1.0' encoding='utf-8'?>

<chapter xml:id="ch-pumping-lemma-regular" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Pumping Lemma for Regular Languages</title>
  <objectives>
    In this chapter you will learn:
     <ol>
       <li> Introduction to the Pumping Lemma for Regular Languages</li>
       <li> Spotting Loops and Repetition in FAs </li>
       <li> The Pumping Lemma for Regular Languages </li>
       <li> Additional Non-Regular Languages for Proving </li>
     </ol>
  </objectives>
  <section xml:id="sec-pumpinglemaintro">
    <title>Introduciton to the Pumping Lemma for Regular Languages</title>
    <exploration>
      <title>Revisiting the Properties of DFAs</title>
      <p>
        Consider <m>M_1</m> below.
      </p>
      <image source="../generated/latex-image/FAEXM25.svg" width="50%">
	    </image>
     
      <p>
        How many states are in this machine?
      </p>
      <answer>
        <p>
          4. There are 4 states represented by circles.
        </p>
      </answer>
      <p>
        Come up with some strings that exist in the languge of this machince. For the sake of example, we will use
        <m>10110110011</m>, <m>01011</m>, and <m>011</m>.
      </p>
      <p>
        Next, make a list of the states visited to parce throgh each of those strings. like this:
      </p>
      <table xml:id="RLPLParceTablea">
          <title>Parce Tables for 110101111011 in <m>M_1</m></title>
            <tabular>
              <row header="no">
                <cell right="medium"> States </cell>
                <cell right="minor" bottom ="minor">A</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">A</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">A</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">B</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">C</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">B</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">C</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">D</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">B</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">C</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">B</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">C</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">D</cell>
              </row>
              <row header="no">
                <cell right="medium">String</cell>
                <cell right="minor"> </cell>
                <cell right="minor">1</cell>
                <cell right="minor"> </cell>
                <cell right="minor">1</cell>
                <cell right="minor"> </cell>
                <cell right="minor">0</cell>
                <cell right="minor"> </cell>
                <cell right="minor">1</cell>
                <cell right="minor"> </cell>
                <cell right="minor">0</cell>
                <cell right="minor"> </cell>
                <cell right="minor">1</cell>
                <cell right="minor"> </cell>
                <cell right="minor">1</cell>
                <cell right="minor"> </cell>
                <cell right="minor">1</cell>
                <cell right="minor"> </cell>
                <cell right="minor">1</cell>
                <cell right="minor"> </cell>
                <cell right="minor">0</cell>
                <cell right="minor"> </cell>
                <cell right="minor">1</cell>
                <cell right="minor"> </cell>
                <cell right="minor">1</cell>
                <cell right="minor"> </cell>
              </row>
            </tabular>
        </table>
        <table xml:id="RLPLParceTableb">
          <title>Parce Tables for 01011 in <m>M_1</m></title>
            <tabular>
              <row header="no">
                <cell right="medium"> States </cell>
                <cell right="minor" bottom ="minor">A</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">B</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">C</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">B</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">C</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">D</cell>
              </row>
              <row header="no">
                <cell right="medium">String</cell>
                <cell right="minor"> </cell>
                <cell right="minor">0</cell>
                <cell right="minor"> </cell>
                <cell right="minor">1</cell>
                <cell right="minor"> </cell>
                <cell right="minor">0</cell>
                <cell right="minor"> </cell>
                <cell right="minor">1</cell>
                <cell right="minor"> </cell>
                <cell right="minor">1</cell>
                <cell right="minor"> </cell>
              </row>
            </tabular>
        </table>
        <table xml:id="RLPLParceTablec">
          <title>Parce Tables for 011 in <m>M_1</m></title>
            <tabular>
              <row header="no">
                <cell right="medium"> States </cell>
                <cell right="minor" bottom ="minor">A</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">B</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">C</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">D</cell>
              </row>
              <row header="no">
                <cell right="medium">String</cell>
                <cell right="minor"> </cell>
                <cell right="minor">0</cell>
                <cell right="minor"> </cell>
                <cell right="minor">1</cell>
                <cell right="minor"> </cell>
                <cell right="minor">1</cell>
                <cell right="minor"> </cell>
              </row>
            </tabular>
        </table>
        <p>
          So, if our DFA has <m>n</m> states, then any string with length at least <m>n</m> will revisit some state that the DFA has 
          been in before. This is an application of the <idx>Pigeon Hole Principle</idx> <term>Pigeon Hole Principle</term>. A string 
          with <m>n</m> symbols needs <m>n+1</m> states if it does not want to revisit a state.
        </p>
        <p>
          Writing out these tables can make looping patterns more apparent. In <m>M_1</m>, the transition among <m>B</m> to <m>C</m> and 
          <m>C</m> to <m>B</m> could be repeated by a string. Another loop that can be repeated is <m>A</m> to <m>A</m>.
          Loops can be removed and still have a string in the language.
        </p>
        <p>
          We can see this using the first string,
          <me>
            s^{(1)} = 110101111011
          </me>. 
          The repeating <m>1</m>s at the beginning can be removed and the string 
          is still in the languge, so the condensed string is
          <me>
            s^{(1)'} = 0101111011
          </me>
          The repeating <m>10</m>s resulting from <m>B</m> to <m>C</m> transitions can also be taken out.
          <me>
            s^{(1)''} = 011111
          </me>
          This string is also in the language.
        </p>
        <p>
          Try a couple more strings to identify patterns. Are there any similarly deduced strings that you
           can find?
        </p>
        <p>
          Loops can be taken out, or they can be taken many times.
        </p>
    </exploration>
    <p>
      The Pigeon Hole Principle can be seen in all DFAs. And since it can be, we can build it into a mechanism to help
      us understand when languages are regular. 
      That brings us to the Pumping Lemma.
    </p>
  </section>
  <section>
    <title>Spotting Loops and Repetition in FAs</title>
    <p>
      Consider <m>M_2</m> where
    </p>
    <me>
      L(M_2) = L_2
    </me>
    <me>
      \Sigma = {0,1}
    </me>
    <image source="../generated/latex-image/FAEXM26a.svg" width="50%">
	  </image>
    <p>
      Consider the following strings as given to <m>M_2</m>. 
      <ul>
        <li>
          <m>s^{(0)} = 01:</m>
          <tabular>
              <row header="no">
                <cell right="medium"> States </cell>
                <cell right="minor" bottom ="minor">A</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">B</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">C</cell>
              </row>
              <row header="no">
                <cell right="medium">String</cell>
                <cell right="minor" > </cell>
                <cell right="minor" >0</cell>
                <cell right="minor" > </cell>
                <cell right="minor" >1</cell>
                <cell right="minor" > </cell>
              </row>
            </tabular>
        </li>
        <li>
          <m>s^{(1)} = 0111:</m>
          <tabular>
              <row header="no">
                <cell right="medium"> States </cell>
                <cell right="minor"  bottom ="minor">A</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">B</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">C</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">C</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">C</cell>
              </row>
              <row header="no">
                <cell right="medium">String</cell>
                <cell right="minor" > </cell>
                <cell right="minor" >0</cell>
                <cell right="minor" > </cell>
                <cell right="minor" >1</cell>
                <cell right="minor" > </cell>
                <cell right="minor" >1</cell>
                <cell right="minor" > </cell>
                <cell right="minor" >1</cell>
                <cell right="minor" > </cell>
              </row>
            </tabular>
        </li>
        <li>
          <m>s^{(2)} = 01001001:</m>
          <tabular>
              <row header="no">
                <cell right="medium"> States </cell>
                <cell right="minor"  bottom ="minor">A</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">B</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">C</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">C</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">C</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">C</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">C</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">C</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">C</cell>
              </row>
              <row header="no">
                <cell right="medium">String</cell>
                <cell right="minor"> </cell>
                <cell right="minor">0</cell>
                <cell right="minor"> </cell>
                <cell right="minor">1</cell>
                <cell right="minor"> </cell>
                <cell right="minor">0</cell>
                <cell right="minor"> </cell>
                <cell right="minor">0</cell>
                <cell right="minor"> </cell>
                <cell right="minor">1</cell>
                <cell right="minor"> </cell>
                <cell right="minor">0</cell>
                <cell right="minor"> </cell>
                <cell right="minor">0</cell>
                <cell right="minor"> </cell>
                <cell right="minor">1</cell>
                <cell right="minor"> </cell>
              </row>
            </tabular>
        </li>
      </ul>
      After writing out these parce tables, it is clear to see that any combination of characters 
      after an initial <m>01</m> can be repeated without affecting if the string is accepted. This 
      not only allows us to determine that <m>L_2 = \{\mbox{any string that begins with 01}\}</m> but 
      also helps us understand that any concatenation of characters <m>0</m>, <m>1</m>, <m>01</m>, etc. 
      can be reapeated any amount of times. Even <m>P</m> number of times.
    </p>
  </section>
  <section xml:id="sec-RLpumpinglemma">
    <title>The Pumping Lemma for Regular Languages</title>
    <p>
      <idx>Pumping Lemma for Regular Languages</idx> The <term>Pumping Lemma for Regular Languages</term> can be used to prove that languages are regular. It follows the general form outlined below.
    </p>
        <p>
          If <m>L</m> is regular, then it has a pumping length <m>p</m>. Every string in <m>L</m> of length at least <m>p</m>
          will be pumpable. 
        </p>
        <p>
          Given this string, call it <m>s</m> (<m>S^{(1)}</m>). It has three parts:
          <ul>
            <li>
              <p>
                A beginning that can be <m>\epsilon</m> - call it <m>x</m>
              </p>
            </li>
            <li>
              <p>
                A pumpable part that cannot be <m>\epsilon</m> - call it <m>y</m>
              </p>
            </li>
            <li>
              <p>
                An end that can be <m>\epsilon</m> - call it <m>z</m>
              </p>
            </li>
          </ul>
          The key here is that we can make new strings in the language by removing <m>y(s^{(1)})</m> or adding 
          <m>y</m> as many times as we'd like. Such as: <m>s^{(2)}</m>, <m>s^{(3)}</m>, <m>s^{(4)}</m>, etc.
        </p>
        <p>
          This works for any string that is long enough, and it happens within the first <m>p</m> symbols of the input
          string.
        </p>
    <p>
      In general, if the language of a machine is regular and the test string has length of at least p, then it is pumpable. 
      This also means that there is some non-empty <m>y</m> loop, but this will typically be written more formally and closer to:
      <ol>
        <li>
          <p>
            If a language is a Regular Language then
          </p>
        </li>
        <li>
          <p>
            <m>\exists p \geq 1</m> such that <m>\forall x \in L</m> with <m>|s|\geq p</m>
          </p>
        </li>
        <li>
          <p>
            Then <m>s^{(1)} = xyz</m> where: 
            <me>
              |y| > 0
            </me>
            <me>
              |xy| \leq p \mbox{, and }
            </me>
            <me>
              \forall i \geq 0, xy^iz\in L
            </me>
            <me>
              (\mbox{also known as: }) s^{(i)}\in L
            </me>
          </p>
        </li>
      </ol>
    </p>
    <theorem xml:id="thm-plRL">
      <statement>
        <p>
          Take a languge we want to prove is not regular.
        </p>
        <ol>
          <li>
            <p>
              Assume it is regular.
            </p>
          </li>
          <li>
            <p>
            
              Pick a string that is at least of length <m>p</m> in the language
            </p>
          </li>
          <li>
            <p>
              Show that every possible choice for <m>y</m> cannot work
            </p>
          </li>
          <li>
            <p>
              Thus the assumption is wrong and by contradition, the language is not regular.
            </p>
          </li>
        </ol>
      </statement>
    </theorem>
    
    <exploration>
      <title>Pumping Lemma for Regular Languages without a Machine</title>
      <p>
        Say <m>L_1</m>: has a number of 0s divisible by 3 and an even number of 1s. 
        <ul>
          <li>
            <p>
              <m>L_1</m> is a Regular Language. 
            </p>
          </li>
        </ul>
        Let's say we don't know <m>p</m>, just that it exists. Let's pick a string that's <m>p</m> long. 
        <ul>
          <li>
            <p>
              This staisfies <m>s\in L</m> and <m>|s|\geq p</m>
            </p>
          </li>
        </ul>
        <me>s^{(1)} = (00011)^p</me> 
        Some piece of <m>s^{(1)}</m> in the first <m>p</m> symbols is pumpable.
        <ul>
          <li>
            <p>
              There is some <m>y</m> that we can extract or insert as many times as we want
            </p>
          </li>
        </ul>
      </p>
      
    </exploration>
    <!--TODO: would like to write something here to break up the explorations-->
    <exploration>
      <title>Pumping Lemma for Regular Languges with Defined Language</title>
      <p>
        Consider <m>L_{01}=\{0^n1^n|n\leq 0 \}</m>.
      </p>
      <ol>
        <li>
          <p>
            Assume <m>L_{01}</m> is regular thus obeying the Pumping Lemma for Regular Languages.
          </p>
        </li>
        <li>
          <p>
            Let us choose <m>s^{(1)} = 0^p1^p</m> since <m>L_{01}</m> is a Regular Language, any string that is long 
            enough should be pumpable.
          </p>
        </li>
        <li>
          <p>
            A pumpable part (<m>y</m>) must occur in the first <m>p</m> symbols. So, <m>y</m> must contain one or more 0s 
            and no 1s since the first <m>p</m> symbols are 0s.
          </p>
          <p>
            If we pump down to <m>s^{(0)}</m>, we will thus remove some 0s without removing any 1s. <m>s^{(0)}</m> cannot
            possibly be in <m>L_{01}</m>, no matter the choice for <m>y</m>.
          </p>
        </li>
        <li>
          <p>
            Thus the assumption is wrong and by contradiction, the language is not regular. 
          </p>
        </li>
      </ol>
    </exploration>
  </section>
  <section xml:id="sec-PLRLFunLangs">
    <title>Additional Non-Regular Languages for Proving</title>
    <p>
      Here are some additional, fun, non-regular languages to try to prove (in increasing complexity): 
      <ul>
        <li>
          <m>\{0^i1^j|i>j\}</m>
        </li>
        <li>
          <m>\{0^i1^j|i\geq j\}</m>
        </li>
        <li>
          <m>\{0^i1^j|i \lt j\}</m>
        </li>
       <li>
          <m>\{0^i1^j|i \leq j\}</m>
        </li>
        <li>
          <m>\{0^n1^m0^n\}</m>
        </li>
        <li>
          <m>\{a^ib^jc^k|i=j \mbox{ when } k=1\}</m>
        </li>
        <li>
          <m>\{ww^R|w \mbox{ is a binary string}\}</m>
        </li>
        <li>
          <m>\{w|w \mbox{ is a palindrome}\}</m>
        </li>
        <li>
          <m>\{ab^nc^n\}</m>
        </li>
        <li>
          <m>\{a^ib^jc^k| j = k \mbox{ when } i = 1 \}</m>
        </li>
      </ul>
      Unless stated otherwise, <m>i,j,k,m,n \geq 0</m>. You can try <m>>0</m> or <m>>2</m> for additional practice.
    </p>
  </section>

  <exercises>
    <exercise>
      <statement>
        <p>
          Consider the machine below. What is the language of the machine? What are some state loops present within it?
        </p>
      </statement>
      <image source="../generated/latex-image/FAEXM26b.svg" width="50%">
	    </image>
      <hint>
        <p>
          Come up with some test strings and their parce paths. Are there any patterns of repetition?
        </p>
        <ul>
        <li>
          <m>s^{(0)} = 01:</m>
          <tabular>
              <row header="no">
                <cell right="medium"> States </cell>
                <cell right="minor" bottom ="minor">A</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">B</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">C</cell>
              </row>
              <row header="no">
                <cell right="medium">String</cell>
                <cell right="minor" > </cell>
                <cell right="minor" >0</cell>
                <cell right="minor" > </cell>
                <cell right="minor" >1</cell>
                <cell right="minor" > </cell>
              </row>
            </tabular>
        </li>
        <li>
          <m>s^{(1)} = 01001:</m>
          <tabular>
              <row header="no">
                <cell right="medium"> States </cell>
                <cell right="minor"  bottom ="minor">A</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">B</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">C</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">A</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">B</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">C</cell>
              </row>
              <row header="no">
                <cell right="medium">String</cell>
                <cell right="minor" > </cell>
                <cell right="minor" >0</cell>
                <cell right="minor" > </cell>
                <cell right="minor" >1</cell>
                <cell right="minor" > </cell>
                <cell right="minor" >0</cell>
                <cell right="minor" > </cell>
                <cell right="minor" >0</cell>
                <cell right="minor" > </cell>
                <cell right="minor" >1</cell>
                <cell right="minor" > </cell>
              </row>
            </tabular>
        </li>
        <li>
          <m>s^{(2)} = 01001111:</m>
          <tabular>
              <row header="no">
                <cell right="medium"> States </cell>
                <cell right="minor"  bottom ="minor">A</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">B</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">C</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">A</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">B</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">C</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">C</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">C</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">C</cell>
              </row>
              <row header="no">
                <cell right="medium">String</cell>
                <cell right="minor"> </cell>
                <cell right="minor">0</cell>
                <cell right="minor"> </cell>
                <cell right="minor">1</cell>
                <cell right="minor"> </cell>
                <cell right="minor">0</cell>
                <cell right="minor"> </cell>
                <cell right="minor">0</cell>
                <cell right="minor"> </cell>
                <cell right="minor">1</cell>
                <cell right="minor"> </cell>
                <cell right="minor">1</cell>
                <cell right="minor"> </cell>
                <cell right="minor">1</cell>
                <cell right="minor"> </cell>
                <cell right="minor">1</cell>
                <cell right="minor"> </cell>
              </row>
            </tabular>
        </li>
      </ul>
      </hint>
      <answer>
        <p>
          A pattern of state repition is: <m>A</m> to <m>B</m> to <m>C</m>.
        </p>
      </answer>
    </exercise>
    <exercise>
      <statement>
        <p>
          Identify patterns of state repetition from a written language. 
          <me>
            L_2 = \{\mbox{any string with an odd number of 0s, starts with 1, ends with 111, and has at least two 0s}\}
          </me>
        </p>
      </statement>
      <hint>
        <p>
          Some test strings inlcude: 
          <ul>
            <li>
              <m>s^(0) = 1000111</m>
            </li>
            <li>
              <m>s^(1) = 10100111</m>
            </li>
            <li>
              <m>s^(2) = 1000000011111</m>
            </li>
          </ul>
        </p>
      </hint>
      <answer>
        <p>
          Character repetitions can exist in these two places:
          <ul>
            <li>
              <m>10(00)^*111</m>
            </li>
            <li>
              <m>10(1)^*00111</m>
            </li>
          </ul>
          They can also be combined.
        </p>
      </answer>
    </exercise>
    <exercise>
      <statement>
        <p>
          Prove <m>L_{xx}</m> is regular or not.
        </p>
        <me>
          L_{xx}=\{w\#w | w \mbox{ is any binary string}\}
        </me>
        <me>
          \Sigma = \{0,1,\#\}
        </me>
      </statement>
    </exercise>
    <exercise>
      <statement>
        <p>
          Prove <m>L_{ab}</m> is regular or not.
        </p>
        <me>
          L_{ab}=\{(ab)^n|n \geq 100\}
        </me>
        <me>
          \Sigma = \{a,b\}
        </me>
      </statement>
    </exercise>
    <exercise>
      <statement>
        <p>
          Prove <m>L_{a}</m> is regular or not.
        </p>
        <me>
          L_{a}=\{a^{2^n}|n \geq 0\}
        </me>
        <me>
          \Sigma = \{a\}
        </me>
      </statement>
    </exercise>
    <exercise>
      <statement>
        <p>
          Prove the following language is regular.
          <me>
            L = \{(01)^n(01)^n(01)^n|n\geq 0 \}
          </me>
        </p>
      </statement>
    </exercise>
    <exercise>
      <statement>
        <p>
          Use the pumping lemma for regular languages to prove the following language is not regular.
          <me>
            L = \{a^ib^jc^k | i = j + k\}
          </me>
        </p>
      </statement>
    </exercise>
    <exercise>
      <statement>
        <p>
          The languages of brackets consists of all strings with nesting and matching parenthesis, brackets, and braces. Is this language regular or not? Prove it.
          <me>
            \Sigma = \{ (, ), [, ], \{, \} \}
          </me>
        </p>
      </statement>
      <hint>
        <p>
          Sample strings include: 
          <ul>
            <li>
              <p>
                [(){}]
              </p>
            </li>
            <li>
              <p>
                [[[()]]]{}{}{{}}
              </p>
            </li>
            <li>
              <p>
                {}
              </p>
            </li>
            <li>
              <p>
                <m>\epsilon</m>
              </p>
            </li>
          </ul>
        </p>
      </hint>
    </exercise>
    <exercise>
      <statement>
        <p>
          Use the fact that regular languages are closed under intersection to prove that the language of any concatenation of English words, followed by #,
          followed by the exact same concatenation of English words is not regular. This language can be written as (w#w | w is any concatenation of English words)
        </p>
        <p>
          You have been given that: 
          <me>
            \{a^n\#a^n | n \geq 0\}
          </me>
          is not regular.
        </p>
      </statement>
      <hint>
        <p>
          Sample strings include:
          <ul>
            <li>
              <p>
                thethe#thethe
              </p>
            </li>
            <li>
              <p>
                same#same
              </p>
            </li>
            <li>
              <p>
                atimeto#atimeto
              </p>
            </li>
          </ul>
        </p>
      </hint>
    </exercise>
    <exercise>
      <statement>
        <p>
          According to Webster, the English langugae consists of approximately 470,000 words. Describe why (w#w | w is an English word) is a regular language.
        </p>
      </statement>
    </exercise>
    <exercise>
      <statement>
        <p>
          Prove that the language with binary strings that have more 0s than 1s is not regular.
        </p>
      </statement>
    </exercise>
    <exercise>
      <statement>
        <p>
          Prove that the language with strings with any number of a's, b's, and c's, but with an equal number of d's and e's is not regular.
        </p>
      </statement>
    </exercise>
    <exercise>
      <statement>
        <p>
          Apply the pumping lemma for regular languages. Prove the language below is not regular. 
        </p>
        <me>
          L = \{\triangle ^i \square^j | i \ngeq j\}
        </me>
        
      </statement>
    </exercise>
    <exercise>
      <statement>
        <p>
          Using the pumping lemma for regular languages, prove the language below is not regular. 
        </p>
        <me>
          L = \{\star ^i \triangle ^j \square ^i | i \ngeq j\}
        </me>
        
      </statement>
    </exercise>
    <exercise>
      <statement>
        <p>
          Prove the following language, L, with <m>\Sigma =\{a,b,c,d\}</m>is not regular using the pumping lemma for regular languages. 
        </p>
        <me>
          L = \{a^nb^mc^nd^m | n,m \geq 0\}
        </me>
        <p>
          Some sample strings in the language are: <m>ac</m>, <m>bd</m>, <m>abcd</m>, and <m>aabccd</m>
        </p>
      </statement>
    </exercise>
  </exercises>
    <!--
  <xi:include href=".sec-emp-intro.ptx" />
  <xi:include href=".sec-emp-next.ptx" />
  <xi:include href=".sec-emp-conc.ptx" /> 
  -->

</chapter>
