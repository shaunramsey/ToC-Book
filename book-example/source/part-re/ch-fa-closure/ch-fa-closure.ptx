<?xml version='1.0' encoding='utf-8'?>

<chapter xml:id="ch-fa-closure" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Closure and Regular Languages</title>
  <objectives>
    In this chapter you will learn:
     <ol>
       <li> Discrete Math Review</li>
       <li> Closure </li>
     </ol>
  </objectives>

  <section xml:id="sec-closureintro">
    <title>Closure</title>
    <p>
      <idx>Closure</idx> A set is <term>closed</term> under an operation when any application of that operation on an element (or elements) in that set always 
      results in an element in the set.
    </p>
    <exploration>
    <image source="../generated/latex-image/FAPicSet.svg" width="50%">
      </image>
    <p>
      Each column is an element of the set. 
      <ol>
        <li>
          <p>
            If I take an element and swap its top character with the top character of another 
            element, do I stay in the set?
          </p>
        </li>
        <li>
          <p>
            How about swapping bottom characters?
          </p>
        </li>
        <li>
          <p>
            What if I change the bottom character to a <m>\triangle</m>?
          </p>
        </li>
        <li>
          <p>
            How about swapping <m>\square</m>s and <m>\bigcirc</m>s?
          </p>
        </li>
        <li>
          <p>
            How about swapping middle characters to <m>\triangle</m>s, <m>\square</m>s, or <m>\bigcirc</m>s?
          </p>
        </li>
      </ol>
    </p>
    </exploration>
    <exploration>
      <title>Closure in Natural Numbers</title>
      <p>
        Consider a few simple operations applied to the natural numbers.
      </p>
      <me>
        \N = \{1,2,3,4,5,6,7,8...\}
      </me>
      <p>
        <ul>
          <li>
            <p>
              Addition - take any two <m>\N</m> and add them. Is the result always in <m>\N</m>?
              <ul>
                <li>
                  <p>
                    If yes, <m>\N</m> are closed under addition
                  </p>
                </li>
                <li>
                  <p>
                    If no, <m>\N</m> are not closed under addition and a counter-example needs to be provided
                  </p>
                </li>
              </ul>
            </p>
            <answer>
              <p>
                Yes.
              </p>
            </answer>
          </li>
          <li>
            <p>
              Subtraction - take any two <m>\N</m> and subtract one from the other. Is the result always in <m>\N</m>?
              <ul>
                <li>
                  <p>
                    If yes, <m>\N</m> are closed under subtraction
                  </p>
                </li>
                <li>
                  <p>
                    If no, <m>\N</m> are not closed under subtraction and a counter-example needs to be provided
                  </p>
                </li>
              </ul>
            </p>
            <answer>
              <p>
                No. Negative numbers are not included in the <m>\N</m>. 
                <me>
                  1,2 \in \N
                </me>
                <me>
                  2-1=-1
                </me>
                <me>
                  -1 \notin \N
                </me>
              </p>
            </answer>
          </li>
          <li>
            <p>
              Multiplication - take any two <m>\N</m> and multiply them. Is the result always in <m>\N</m>?
              <ul>
                <li>
                  <p>
                    If yes, <m>\N</m> are closed under multiplication
                  </p>
                </li>
                <li>
                  <p>
                    If no, <m>\N</m> are not closed under multiplication and a counter-example needs to be provided
                  </p>
                </li>
              </ul>
            </p>
            <answer>
              <p>
                Yes.
              </p>
            </answer>
          </li>
          <li>
            <p>
              Division - take any two <m>\N</m> and divide them. Is the result always in <m>\N</m>?
              <ul>
                <li>
                  <p>
                    If yes, <m>\N</m> are closed under division
                  </p>
                </li>
                <li>
                  <p>
                    If no, <m>\N</m> are not closed under division and a counter-example needs to be provided
                  </p>
                </li>
              </ul>
            </p>
            <answer>
              <p>
                No. 
                <me>
                  1,2 \in \N
                </me>
                <me>
                  1/2 = 0.5
                </me>
                <me>
                  0.5 \notin \N
                </me>
              </p>
            </answer>
          </li>
          <li>
            <p>
              Negation - take any <m>\N</m> and make it negative. Is the result always in <m>\N</m>?
              <ul>
                <li>
                  <p>
                    If yes, <m>\N</m> are closed under negation
                  </p>
                </li>
                <li>
                  <p>
                    If no, <m>\N</m> are not closed under negation and a counter-example needs to be provided
                  </p>
                </li>
              </ul>
            </p>
            <answer>
              <p>
                No.
                <me>
                  1 \in \N
                </me>
                <me>
                  1 * -1 = -1
                </me>
                <me>
                  -1 \notin \N
                </me>
                
              </p>
            </answer>
          </li>
        </ul>
        Some additional operations could be: reciprocals, modulus, exponentiation, and factorial.
      </p>
    </exploration>
    <p>
      If a set is closed under certain operations is helpful to know for type safety as a developer and in proofs.
    </p>
    <exploration>
      <title>Implications</title>
      <p>
        We know <m>\N</m> are closed under addition. This means we know that if <m>x \in \N</m> and <m>y \in \N</m>
        then <m>x+y \in \N</m>. 
      </p>
      <p>
        This is an example of an <idx>Implication</idx> <term>implication</term>. 
        <me>
          \mbox{ if A then B} A \longrightarrow B \mbox{ or if A is true, then B is true}
        </me>
        <me>
          or
        </me>
        <me>
          A \longrightarrow B \mbox{ or if A is true, then B is true}
        </me>
        <me>
          or
        </me>
        <me>
          \mbox{ if A is true, then B is true}
        </me>
        </p>
        <table>
        <tabular>
          <row header="no">
            <cell bottom="medium">A</cell><cell bottom="medium" right="medium">B</cell><cell bottom="medium" right="medium"><m>A \longrightarrow B</m></cell><cell bottom="medium"><m>\bar{A} + B</m></cell>
          </row>
          <row header="no">
            <cell>1</cell><cell right="medium">1</cell><cell right="medium"><m>1</m></cell><cell right="medium"><m>1</m></cell>
          </row>
          <row header="no">
            <cell>1</cell><cell right="medium">0</cell><cell right="medium"><m>0</m></cell><cell right="medium"><m>0</m></cell>
          </row>
          <row header="no">
            <cell>0</cell><cell right="medium">1</cell><cell right="medium"><m>1</m></cell><cell right="medium"><m>1</m></cell>
          </row>
          <row header="no">
            <cell>0</cell><cell right="medium">0</cell><cell right="medium"><m>1</m></cell><cell right="medium"><m>1</m></cell>
          </row>
          </tabular>
        </table>
    </exploration>
    <exploration>
      <title>Logic in Closure</title>
      <p>
          Here is another binary operator: 
          <me>
            \mbox{if A and B then C}
          </me>
        </p>
        <table>
          <tabular>
            <row>
              <cell bottom="medium">A</cell><cell bottom="medium">B</cell><cell bottom="medium" right="medium">C</cell><cell bottom="medium" right="medium">AB</cell>
              <cell bottom="medium" right="medium"><m>AB \longrightarrow C</m></cell><cell bottom="medium" right="medium"><m>\bar{AB} + C</m></cell>
              <cell bottom="medium"><m>\bar{A} + \bar{B} + C</m></cell>
            </row>
            <row>
              <cell>0</cell><cell>0</cell><cell right="medium">0</cell><cell right="medium">0</cell>
              <cell right="medium"><m>1</m></cell><cell right="medium"><m>1</m></cell><cell><m>1</m></cell>
            </row>
            <row>
              <cell>0</cell><cell>0</cell><cell right="medium">1</cell><cell right="medium">0</cell>
              <cell right="medium"><m>1</m></cell><cell right="medium"><m>1</m></cell><cell><m>1</m></cell>
            </row>
            <row>
              <cell>0</cell><cell>1</cell><cell right="medium">0</cell><cell right="medium">0</cell>
              <cell right="medium"><m>1</m></cell><cell right="medium"><m>1</m></cell><cell><m>1</m></cell>
            </row>
            <row>
              <cell>0</cell><cell>1</cell><cell right="medium">1</cell><cell right="medium">0</cell>
              <cell right="medium"><m>1</m></cell><cell right="medium"><m>1</m></cell><cell><m>1</m></cell>
            </row>
            <row>
              <cell>1</cell><cell>0</cell><cell right="medium">0</cell><cell right="medium">0</cell>
              <cell right="medium"><m>1</m></cell><cell right="medium"><m>1</m></cell><cell><m>1</m></cell>
            </row>
            <row>
              <cell>1</cell><cell>0</cell><cell right="medium">1</cell><cell right="medium">0</cell>
              <cell right="medium"><m>1</m></cell><cell right="medium"><m>1</m></cell><cell><m>1</m></cell>
            </row>
            <row>
              <cell>1</cell><cell>1</cell><cell right="medium">0</cell><cell right="medium">1</cell>
              <cell right="medium"><m>0</m></cell><cell right="medium"><m>0</m></cell><cell><m>0</m></cell>
            </row>
            <row>
              <cell>1</cell><cell>1</cell><cell right="medium">1</cell><cell right="medium">1</cell>
              <cell right="medium"><m>1</m></cell><cell right="medium"><m>1</m></cell><cell><m>1</m></cell>
            </row>
          </tabular>
        </table>
        <p>
          Given the above logic table, we now know that 
          <m>\mbox{if A and B then C} </m> is logically equivalent to <m>\bar{A} + \bar{B} + C</m>. 
        </p>
        <p>
          Let us say we know <m>C</m> is not true and <m>B</m> is true. What must <m>A</m> be?
        </p>
        <answer>
          <p>
            Not true.
          </p>
        </answer>
        <p>
          That is a form of the contrapositive. 
          <me>
            A \longrightarrow B \mbox{ means } \bar{A}+B
          </me>
          <me>
            \bar{B} \longrightarrow \bar{A} \mbox{ means } \bar{A}+B
          </me>
          For this situation, <m>AB\longrightarrow C</m> means <m>\bar{AB} + C = \bar{A}+\bar{B}+C</m> and 
          <m>\bar{C} \longrightarrow \bar{AB}</m> means <m>C+\bar{AB} = \bar{A}+\bar{B}+C</m>.
          So, these statements are the same, but if we know <m>\bar{C}</m>, then either A or B is untrue.
        </p>
        <p>
          This is telling us that given <m>x + y = z</m>, the boolean <m>\bar{A}+\bar{B}+C</m> must be true. So,
        <me>
          x \notin \N
          </me>
          <me>
            or
          </me>
          <me>
            y \notin \N
          </me>
          <me>
            or
          </me>
          <me>
            x + y \in \N
          </me>
          These conclusions are very important for understanding closure.
        </p>
    </exploration>
  </section>
  <section xml:id="sec-howtoRLClosureProof">
    <title>How to Write a Closure Proof</title>
    <p>
      These three posibilities are the most important things when writing closure proofs: 
      <me>
          x \notin \N
          </me>
          <me>
            or
          </me>
          <me>
            y \notin \N
          </me>
          <me>
            or
          </me>
          <me>
            x + y \in \N
          </me>
      Let us say we are given <m>x+y\in \R</m>, <m>x+y \notin \N</m>, and <m>y \in \N</m>.
      <ul>
        <li>
          <p>
            What do we know about <m>x</m>?
          </p>
        </li>
      </ul>
      What if we know <m>x+y \in \N</m> and <m>x \in \N</m>?
      <ul>
        <li>
          <p>
            What do we know about <m>y</m>?
          </p>
        </li>
      </ul>
      What if we know <m>x+y \in \R</m> and <m>x \in \N</m>?
      <ul>
        <li>
          <p>
            What do we know about <m>y</m>?
          </p>
        </li>
      </ul>
      Within all of the scenarios, the arguments must follow the important possibilities.
    </p>

  </section>
  <section xml:id="sec-constructionproofs">
    <title>Closure Proven through Construction</title>
    <p>
      Regular Languages are closed under many operations. Closure can be proven using the construction proof technique.
    </p>
    <proof>
      <title>RLs Closed under Union</title>
      <p>
        <idx>Union</idx> RL closure under <term>union</term> follows the basic progression: if <m>L_1</m> is a RL and <m>L_2</m> 
        is a RL, then <m>L_1\cup L_2</m> is a RL.
      </p>
      <p>
        If <m>L_1</m> is a RL, some DFA describes it. It has a start state and a set of accept states. We also added
        empty string tranistions from the original accept states to a singluar new accept state.
      </p>
      <me>
        L(M_1) = L_1
      </me>
      
      <image source="../generated/latex-image/FAEXP1.svg" width="50%">
        </image>
      <p>
        This is the same for <m>L_2</m>.
      </p>
      <me>
        L(M_2) = L_2
      </me>
      <image source="../generated/latex-image/FAEXP1d.svg" width="50%">
        </image>
      <p>
        Using these two machines, we can create the union machine by making a new start state with empty string 
        transitions to the start states for <m>M_1</m> and <m>M_2</m>.
      </p>
      <me>
        L(M_3) = L_1 \cup L_2
      </me>
      <image source="../generated/latex-image/FAEXP1a.svg" width="70%">
        </image>
      <p>
        Since this union machine is an NFA, it describes a RL. 
      </p>
    </proof>
    <exploration>
      <title>RLs Closed under Concatenation</title>
      <p>
        If <m>L_1</m> is a RL and <m>L_2</m> is a RL, then <m>L_1 \cdot L_2</m> is a RL. This means all strings
        created by first choosing a string in <m>L_1</m> and then choosing a string in <m>L_2</m>. So, 
      </p>
      <me>
        L_1 \cdot L_2 = \{{xy \| x\in L_1, y\in L_2}\}
      </me>
      <hint>
        <p>
          A good way to approach this is to start where we did last time, by drawing out machines for each language.
        </p>
        <image source="../generated/latex-image/FAEXP1b.svg" width="70%">
        </image>
      </hint>
    </exploration>
    <exploration>
      <title>RLs Closed under Repitition</title>
      <p>
        Suppose <m>L_1^*</m>, concatenating L_1 with itself 0 or more times.
      </p>
      <image source="../generated/latex-image/FAEXP1.svg" width="70%">
      </image>
      <hint>
        <p>
          Use an empty string transition as a loop.
        </p>
      </hint>
      <answer>
        <image source="../generated/latex-image/FAEXP1c.svg" width="70%">
        </image>
      </answer>
    </exploration>
    <p>
      Closure by <idx>Complementation <m>\bar{ }</m></idx> <term>complementation</term> contains an interesting happening. 
      <m>\bar{L_1}</m> is all strings that can be made with the alphabet but are not in <m>L_1</m>. In a DFA, when we're 
      done processing a string, we are either in an accept state or not. So, <m>\bar{L_1}</m> can be created by inverting
      the accept and reject states.
    </p>
    <exploration>
      <title>RLs Closed under Intersection</title>
      <p>
        <idx>Intersection <m>\cup</m></idx> <term>Intersection <m>\cup</m></term> of <m>L_1\cup L_2</m> is any string that 
        is accepted in <m>L_1</m> and <m>L_2</m>. It is very useful in closure proofs and in crafting NFAs for languages
        that use the logic of <m>and</m>. For example look at these two machines:
      </p>
      <me>
        L_1(M_1) = \{\mbox{all strings that end with a 1}\}
      </me>
      <image source="../generated/latex-image/FAEXP2.svg" width="70%">
        </image>
      <me>
        L_2(M_2) = \{\mbox{all strings with an even number of symbols}\}
      </me>
      <image source="../generated/latex-image/FAEXP2a.svg" width="70%">
        </image>
      <me>
        L_1\cup L_2 = \{\mbox{is any string that ends in a 1 and that has an even number of symbols.}\}
      </me>
      <p>
        Try traceing the path through both machines and only accept if both machines accept. In a more systematic way, consider
        the states <m>Q_1\times Q_2</m> and create those machines.
      </p>
      <hint>
        <p>
          Here are some examples of the step through thinking.
        </p>
        <ul>
          <li>
            <p>
              States with <m>B_2</m> occur when the string has even length.
            </p>
          </li>
          <li>
            <p>
              <m>A_2</m> is when it is odd
            </p>
          </li>
          <li>
            <p>
              <m>A_1</m> says the last seen symbol was a 0
            </p>
          </li>
          <li>
            <p>
              <m>B_1</m> is when it was a 1
            </p>
          </li>
        </ul>
      </hint>
      <image source="../generated/latex-image/FAEXP2b.svg" width="50%">
        </image>
      <p>
        So, it turns out we can use this to build DFAs of challenging languages!
      </p>
      
    </exploration>
    <p>
      RLs are closed under other operatons too, like reversal. Their closure can be proven using the methods above or through counterexamples.
    </p>
    <exercises>
      <exercise>
        <statement>
          <p>
            Create a DFA from these two languages.
            <me>
              L_1 = \{\mbox{strings that begin with 01}\}
            </me>
            <me>
              L_2 = \{\mbox{strings with an even number of 0s}\}
            </me>
          </p>
        </statement>
        <hint>
          <p>
            Machine for <m>L_1:</m>
          </p>
          <image source="../generated/latex-image/FAEXP2c.svg" width="70%">
        </image>
        </hint>
        <hint>
        <p>
            Machine for <m>L_2:</m>
          </p>
          <image source="../generated/latex-image/FAEXP2d.svg" width="50%">
        </image>

        </hint>
        <answer>
          <image source="../generated/latex-image/FAEXP2e.svg" width="50%">
        </image>

          <p>
            The <m>\emptyset</m> state can be used as a shortcut since we'll never leave it, we do not have to trace what happens
            if either path leads to it.
          </p>
        </answer>
      </exercise>
      <exercise>
        <statement>
          <p>
            Prove that the union of <m>L_3</m> and <m>L_4</m> results in a RL.
          </p>
          <me>
            L_3 = \{\mbox{strings that end with 01}\}
          </me>
          <me>
            L_4 = \{\mbox{strings that are 0 mod 3}\}
          </me>
        </statement>
      </exercise>
      
    </exercises>
    
    
    
    <!--TODO: trying to figure out exercisegroups, is not going well https://pretextbook.org/doc/guide/html/basics-s-sample-exercises.html-->
    
  </section>
  
    <!--
  <xi:include href=".sec-emp-intro.ptx" />
  <xi:include href=".sec-emp-next.ptx" />
  <xi:include href=".sec-emp-conc.ptx" /> 
  -->

</chapter>
