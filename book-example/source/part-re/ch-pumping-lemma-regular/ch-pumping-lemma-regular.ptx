<?xml version='1.0' encoding='utf-8'?>

<chapter xml:id="ch-pumping-lemma-regular" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Pumping Lemma for Regular Languages</title>
  <objectives>
    In this chapter you will learn:
     <ol>
       <li> Introduction to the Pumping Lemma for Regular Languages</li>
       <li> Spotting Loops and Repetition in FAs </li>
       <li> The Pumping Lemma for Regular Languages </li>
       <li> Additional Non-Regular Languages for Proving </li>
     </ol>
  </objectives>
  <introduction>
    <p>What will we learn in this chapter?</p>
  </introduction>
  <section xml:id="sec-pumpinglemaintro">
    <title>Introduciton to the Pumping Lemma for Regular Languages</title>
    <exploration>
      <title>Revisiting the Properties of DFAs</title>
      <p>
        Consider <m>M_1</m> below.
      </p>
      <image xml:id="FAEXM25" with="50%">
        <latex-image>
          \begin{tikzpicture}[scale=0.2]
          \tikzstyle{every node}+=[inner sep=0pt]
          \draw [black] (22.7,-18.4) circle (3);
          \draw (22.7,-18.4) node {$A$};
          \draw [black] (36.6,-18.4) circle (3);
          \draw (36.6,-18.4) node {$B$};
          \draw [black] (50.2,-18.4) circle (3);
          \draw (50.2,-18.4) node {$C$};
          \draw [black] (41.5,-30.8) circle (3);
          \draw (41.5,-30.8) node {$D$};
          \draw [black] (41.5,-30.8) circle (2.4);
          \draw [black] (17.5,-12.7) -- (20.68,-16.18);
          \fill [black] (20.68,-16.18) -- (20.51,-15.26) -- (19.77,-15.93);
          \draw [black] (25.429,-17.168) arc (108.00575:71.99425:13.656);
          \fill [black] (33.87,-17.17) -- (33.27,-16.45) -- (32.96,-17.4);
          \draw (29.65,-16) node [above] {$0$};
          \draw [black] (39.314,-17.138) arc (108.31818:71.68182:12.999);
          \fill [black] (47.49,-17.14) -- (46.88,-16.41) -- (46.57,-17.36);
          \draw (43.4,-15.98) node [above] {$1$};
          \draw [black] (47.378,-19.405) arc (-75.73246:-104.26754:16.14);
          \fill [black] (39.42,-19.4) -- (40.07,-20.09) -- (40.32,-19.12);
          \draw (43.4,-20.4) node [below] {$0$};
          \draw [black] (49.305,-21.261) arc (-21.60532:-48.50267:20.287);
          \fill [black] (43.89,-28.99) -- (44.82,-28.83) -- (44.15,-28.08);
          \draw (47.65,-26.81) node [right] {$1$};
          \draw [black] (39.623,-28.465) arc (-146.05091:-170.82506:17.736);
          \fill [black] (36.83,-21.39) -- (36.46,-22.26) -- (37.45,-22.1);
          \draw (37.09,-25.95) node [left] {$1$};
          \draw [black] (38.539,-30.329) arc (-102.62204:-144.19361:24.035);
          \fill [black] (24.3,-20.94) -- (24.36,-21.88) -- (25.17,-21.29);
          \draw (29.56,-27.44) node [below] {$0$};
          \draw [black] (22.37,-21.37) arc (21.38897:-266.61103:2.25);
          \draw (18.06,-24.59) node [below] {$1$};
          \fill [black] (20.14,-19.94) -- (19.21,-19.77) -- (19.58,-20.7);
          \end{tikzpicture}
       </latex-image>
      </image>
     
      <p>
        How many states are in this machine?
      </p>
      <answer>
        <p>
          4. There are 4 states represented by circles.
        </p>
      </answer>
      <p>
        Come up with some strings that exist in the languge of this machince. For the sake of example, we will use
        <m>10110110011</m>, <m>01011</m>, and <m>011</m>.
      </p>
      <p>
        Next, make a list of the states visited to parce throgh each of those strings. like this:
      </p>
      <table xml:id="RLPLParceTablea">
          <title>Parce Tables for 110101111011 in <m>M_1</m></title>
            <tabular>
              <row header="no">
                <cell right="medium"> States </cell>
                <cell right="minor" bottom ="minor">A</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">A</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">A</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">B</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">C</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">B</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">C</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">D</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">B</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">C</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">B</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">C</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">D</cell>
              </row>
              <row header="no">
                <cell right="medium">String</cell>
                <cell right="minor"> </cell>
                <cell right="minor">1</cell>
                <cell right="minor"> </cell>
                <cell right="minor">1</cell>
                <cell right="minor"> </cell>
                <cell right="minor">0</cell>
                <cell right="minor"> </cell>
                <cell right="minor">1</cell>
                <cell right="minor"> </cell>
                <cell right="minor">0</cell>
                <cell right="minor"> </cell>
                <cell right="minor">1</cell>
                <cell right="minor"> </cell>
                <cell right="minor">1</cell>
                <cell right="minor"> </cell>
                <cell right="minor">1</cell>
                <cell right="minor"> </cell>
                <cell right="minor">1</cell>
                <cell right="minor"> </cell>
                <cell right="minor">0</cell>
                <cell right="minor"> </cell>
                <cell right="minor">1</cell>
                <cell right="minor"> </cell>
                <cell right="minor">1</cell>
                <cell right="minor"> </cell>
              </row>
            </tabular>
        </table>
        <table xml:id="RLPLParceTableb">
          <title>Parce Tables for 01011 in <m>M_1</m></title>
            <tabular>
              <row header="no">
                <cell right="medium"> States </cell>
                <cell right="minor" bottom ="minor">A</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">B</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">C</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">B</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">C</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">D</cell>
              </row>
              <row header="no">
                <cell right="medium">String</cell>
                <cell right="minor"> </cell>
                <cell right="minor">0</cell>
                <cell right="minor"> </cell>
                <cell right="minor">1</cell>
                <cell right="minor"> </cell>
                <cell right="minor">0</cell>
                <cell right="minor"> </cell>
                <cell right="minor">1</cell>
                <cell right="minor"> </cell>
                <cell right="minor">1</cell>
                <cell right="minor"> </cell>
              </row>
            </tabular>
        </table>
        <table xml:id="RLPLParceTablec">
          <title>Parce Tables for 011 in <m>M_1</m></title>
            <tabular>
              <row header="no">
                <cell right="medium"> States </cell>
                <cell right="minor" bottom ="minor">A</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">B</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">C</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">D</cell>
              </row>
              <row header="no">
                <cell right="medium">String</cell>
                <cell right="minor"> </cell>
                <cell right="minor">0</cell>
                <cell right="minor"> </cell>
                <cell right="minor">1</cell>
                <cell right="minor"> </cell>
                <cell right="minor">1</cell>
                <cell right="minor"> </cell>
              </row>
            </tabular>
        </table>
        <p>
          So, if our DFA has <m>n</m> states, then any string with length at least <m>n</m> will revisit some state that the DFA has 
          been in before. This is an application of the <idx>Pigeon Hole Principle</idx> <term>Pigeon Hole Principle</term>. A string 
          with <m>n</m> symbols needs <m>n+1</m> states if it does not want to revisit a state.
        </p>
        <p>
          Writing out these tables can make looping patterns more apparent. In <m>M_1</m>, the transition amoung <m>B</m> to <m>C</m> and 
          <m>C</m> to <m>B</m> could be repeated by a string. Another loop that can be repeated is <m>A</m> to <m>A</m>.
          Loops can be removed and still have a string in the language.
        </p>
        <p>
          We can see this using the first string,
          <me>
            s^{(1)} = 110101111011
          </me>. 
          The repeating <m>1</m>s at the beginning can be removed and the string 
          is still in the languge, so the condensed string is
          <me>
            s^{(1)'} = 0101111011
          </me>
          The repeating <m>10</m>s resulting from <m>B</m> to <m>C</m> transitions can also be taken out.
          <me>
            s^{(1)''} = 011111
          </me>
          This string is also in the languge.
        </p>
        <p>
          Try a couple more strings to identify patterns. Are there any similarly deduced strings that you
           can find?
        </p>
        <p>
          Looks can be taken out, or they can be taken many times.
        </p>
    </exploration>
    <p>
      The Pigeon Hole Principle can be seen in all DFAs. And since it can be, we can build it into a mechanism to help
      us understand when languages are regular. 
      That brings us to the Pumping Lemma.
    </p>
  </section>
  <section>
    <title>Spotting Loops and Repetition in FAs</title>
    <p>
      Consider <m>M_2</m> where
    </p>
    <me>
      L(M_2) = L_2
    </me>
    <me>
      \Sigma = {0,1}
    </me>
    <image xml:id="FAEXM26a" with="20%">
      <latex-image>
        \begin{tikzpicture}[scale=0.2]
        \tikzstyle{every node}+=[inner sep=0pt]
        \draw [black] (21.5,-18.4) circle (3);
        \draw (21.5,-18.4) node {$A$};
        \draw [black] (35.3,-18.4) circle (3);
        \draw (35.3,-18.4) node {$B$};
        \draw [black] (48.2,-18.4) circle (3);
        \draw (48.2,-18.4) node {$C$};
        \draw [black] (48.2,-18.4) circle (2.4);
        \draw [black] (30.3,-28.8) circle (3);
        \draw (30.3,-28.8) node {$\emptyset$};
        \draw [black] (15.3,-12) -- (19.41,-16.25);
        \fill [black] (19.41,-16.25) -- (19.22,-15.32) -- (18.5,-16.02);
        \draw [black] (24.262,-17.242) arc (106.76292:73.23708:14.349);
        \fill [black] (32.54,-17.24) -- (31.92,-16.53) -- (31.63,-17.49);
        \draw (28.4,-16.13) node [above] {$0$};
        \draw [black] (38.07,-17.263) arc (105.91066:74.08934:13.425);
        \fill [black] (45.43,-17.26) -- (44.8,-16.56) -- (44.52,-17.52);
        \draw (41.75,-16.25) node [above] {$1$};
        \draw [black] (47.183,-21.21) arc (7.83937:-280.16063:2.25);
        \draw (42.8,-24.55) node [left] {$0,1$};
        \fill [black] (45.35,-19.3) -- (44.49,-18.92) -- (44.63,-19.91);
        \draw [black] (30.287,-25.811) arc (-188.14949:-223.20414:10.232);
        \fill [black] (30.29,-25.81) -- (30.9,-25.09) -- (29.91,-24.95);
        \draw (30.49,-21.76) node [left] {$0$};
        \draw [black] (27.618,-27.469) arc (-122.62442:-156.90286:13.788);
        \fill [black] (27.62,-27.47) -- (27.21,-26.62) -- (26.67,-27.46);
        \draw (23.98,-26.2) node [left] {$1$};
        \draw [black] (32.98,-27.477) arc (144:-144:2.25);
        \draw (37.55,-28.8) node [right] {$0,1$};
        \fill [black] (32.98,-30.12) -- (33.33,-31) -- (33.92,-30.19);
        \end{tikzpicture}
      </latex-image>
    </image>
    <p>
      Consider the following strings as given to <m>M_2</m>. 
      <ul>
        <li>
          <m>s^{(0)} = 01:</m>
          <tabular>
              <row header="no">
                <cell right="medium"> States </cell>
                <cell right="minor" bottom ="minor">A</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">B</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">C</cell>
              </row>
              <row header="no">
                <cell right="medium">String</cell>
                <cell right="minor" > </cell>
                <cell right="minor" >0</cell>
                <cell right="minor" > </cell>
                <cell right="minor" >1</cell>
                <cell right="minor" > </cell>
              </row>
            </tabular>
        </li>
        <li>
          <m>s^{(1)} = 0111:</m>
          <tabular>
              <row header="no">
                <cell right="medium"> States </cell>
                <cell right="minor"  bottom ="minor">A</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">B</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">C</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">C</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">C</cell>
              </row>
              <row header="no">
                <cell right="medium">String</cell>
                <cell right="minor" > </cell>
                <cell right="minor" >0</cell>
                <cell right="minor" > </cell>
                <cell right="minor" >1</cell>
                <cell right="minor" > </cell>
                <cell right="minor" >1</cell>
                <cell right="minor" > </cell>
                <cell right="minor" >1</cell>
                <cell right="minor" > </cell>
              </row>
            </tabular>
        </li>
        <li>
          <m>s^{(2)} = 01001001:</m>
          <tabular>
              <row header="no">
                <cell right="medium"> States </cell>
                <cell right="minor"  bottom ="minor">A</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">B</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">C</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">C</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">C</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">C</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">C</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">C</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">C</cell>
              </row>
              <row header="no">
                <cell right="medium">String</cell>
                <cell right="minor"> </cell>
                <cell right="minor">0</cell>
                <cell right="minor"> </cell>
                <cell right="minor">1</cell>
                <cell right="minor"> </cell>
                <cell right="minor">0</cell>
                <cell right="minor"> </cell>
                <cell right="minor">0</cell>
                <cell right="minor"> </cell>
                <cell right="minor">1</cell>
                <cell right="minor"> </cell>
                <cell right="minor">0</cell>
                <cell right="minor"> </cell>
                <cell right="minor">0</cell>
                <cell right="minor"> </cell>
                <cell right="minor">1</cell>
                <cell right="minor"> </cell>
              </row>
            </tabular>
        </li>
      </ul>
      After writing out these parce tables, it is clear to see that any combination of characters 
      after an initial <m>01</m> can be repeated without affecting if the string is accepted. This 
      not only allows us to determine that <m>L_2 = \{\mbox{any string that begins with 01}\}</m> but 
      also helps us understand that any concatenation of characters <m>0</m>, <m>1</m>, <m>01</m>, etc. 
      can be reapeated any amount of times. Even <m>P</m> number of times.
    </p>
  </section>
  <section xml:id="sec-RLpumpinglemma">
    <title>The Pumping Lemma for Regular Languages</title>
    <p>
      <idx>Pumping Lemma for Regular Languages</idx> The <term>Pumping Lemma for Regular Languages</term> can be used to prove that languages are regular. It follows the general form outlined below.
    </p>
        <p>
          If <m>L</m> is regular, then it has a pumping length <m>p</m>. Every string in <m>L</m> of length at least <m>p</m>
          will be pumpable. 
        </p>
        <p>
          Given this string, call it <m>s</m> (<m>S^{(1)}</m>). It has three parts:
          <ul>
            <li>
              <p>
                A beginning that can be <m>\epsilon</m> - call it <m>x</m>
              </p>
            </li>
            <li>
              <p>
                A pumpable part that cannot be <m>\epsilon</m> - call it <m>y</m>
              </p>
            </li>
            <li>
              <p>
                An end that can be <m>\epsilon</m> - call it <m>z</m>
              </p>
            </li>
          </ul>
          The key here is that we can make new strings in the language by removing <m>y(s^{(1)})</m> or adding 
          <m>y</m> as many times as we'd like. Such as: <m>s^{(2)}</m>, <m>s^{(3)}</m>, <m>s^{(4)}</m>, etc.
        </p>
        <p>
          This works for any string that is long enough, and it happens within the first <m>p</m> symbols of the input
          string.
        </p>
    <p>
      In general, if the language of a machine is regular and the test string has length of at least p, then it is pumpable. 
      This also means that there is some non-empty <m>y</m> loop, but this will typically be written more formally and closer to:
      <ol>
        <li>
          <p>
            If a language is a regular language then
          </p>
        </li>
        <li>
          <p>
            <m>\exists p \geq 1</m> such that <m>\forall x \in L</m> with <m>|s|\geq p</m>
          </p>
        </li>
        <li>
          <p>
            then <m>s^{(1)} = xyz</m> where: 
            <me>
              |y| > 0
            </me>
            <me>
              |xy| \leq p \mbox{, and }
            </me>
            <me>
              \forall i \geq 0, xy^iz\in L
            </me>
            <me>
              (\mbox{also known as: }) s^{(i)}\in L
            </me>
          </p>
        </li>
      </ol>
    </p>
    <theorem xml:id="thm-plRL">
      <statement>
        <p>
          Take a languge we want to prove is not regular.
        </p>
        <ol>
          <li>
            <p>
              Assume it is regular.
            </p>
          </li>
          <li>
            <p>
            
              Pick a string that is at least of length <m>p</m> in the language
            </p>
          </li>
          <li>
            <p>
              Show that every possible choice for <m>y</m> cannot work
            </p>
          </li>
          <li>
            <p>
              Thus the assumption is wrong and by contradition, the language is not regular.
            </p>
          </li>
        </ol>
      </statement>
    </theorem>
    
    <exploration>
      <title>Pumping Lemma for Regular Languages without a Machine</title>
      <p>
        Say <m>L_1</m>: has a number of 0s divisible by 3 and an even number of 1s. 
        <ul>
          <li>
            <p>
              <m>L_1</m> is a regular language. 
            </p>
          </li>
        </ul>
        Let's say we dont know <m>p</m>, just that it exists. Let's pick a string that's <m>p</m> long. 
        <ul>
          <li>
            <p>
              This staisfies <m>s\in L</m> and <m>|s|\geq p</m>
            </p>
          </li>
        </ul>
        <me>s^{(1)} = (00011)^p</me> 
        Some piece of <m>s^{(1)}</m> in the first <m>p</m> symbols is pumpable.
        <ul>
          <li>
            <p>
              There is some <m>y</m> that we can extract or insert as many times as we want
            </p>
          </li>
        </ul>
      </p>
      
    </exploration>
    <!--TODO: would like to write something here to break up the explorations-->
    <exploration>
      <title>Pumping Lemma for Regular Languges with Defined Language</title>
      <p>
        Consider <m>L_{01}=\{0^n1^n|n\leq 0 \}</m>.
      </p>
      <ol>
        <li>
          <p>
            Assume <m>L_{01}</m> is regular thus obeying the Pumping Lemma for Regular Languages.
          </p>
        </li>
        <li>
          <p>
            Let us choose <m>s^{(1)} = 0^p1^p</m> since <m>L_{01}</m> is a Regular Language, any string that is long 
            enough should be pumpable.
          </p>
        </li>
        <li>
          <p>
            A pumpable part (<m>y</m>) must occur in the first <m>p</m> symbols. So, <m>y</m> must contain one or more 0s 
            and no 1s sine the first <m>p</m> symbols are 0s.
          </p>
          <p>
            If we pump down to <m>s^{(0)}</m>, we will thus remove some 0x without removing any 1s. <m>s^{(0)}</m> cannot
            possibly be in <m>L_{01}</m>, no matter the choice for <m>y</m>.
          </p>
        </li>
        <li>
          <p>
            Thus the assumption is wrong and by contradiction, the language is not regular. 
          </p>
        </li>
      </ol>
    </exploration>
  </section>
  <section xml:id="sec-PLRLFunLangs">
    <title>Additional Non-Regular Languages for Proving</title>
    <p>
      Here are some additional, fun, non-regular languages to try to prove (in increasing complexity): 
      <ul>
        <li>
          <m>\{0^i1^j|i>j\}</m>
        </li>
        <li>
          <m>\{0^i1^j|i\geq j\}</m>
        </li>
        <li>
          <m>\{0^i1^j|i \lt j\}</m>
        </li>
       <li>
          <m>\{0^i1^j|i \leq j\}</m>
        </li>
        <li>
          <m>\{0^n1^m0^n\}</m>
        </li>
        <li>
          <m>\{a^ib^jc^k|i=j \mbox{ when } k=1\}</m>
        </li>
        <li>
          <m>\{ww^R|w \mbox{ is a binary string}\}</m>
        </li>
        <li>
          <m>\{w|w \mbox{ is a palindrome}\}</m>
        </li>
        <li>
          <m>\{ab^nc^n\}</m>
        </li>
        <li>
          <m>\{a^ib^jc^k| j = k \mbox{ when } i = 1 \}</m>
        </li>
      </ul>
      Unless stated otherwise, <m>i,j,k,m,n \geq 0</m>. You can try <m>>0</m> or <m>>2</m> for additional practice.
    </p>
  </section>

  <exercises>
    <exercise>
      <statement>
        <p>
          Consider the machine below. What is the language of the machine? What are some state loops present within it?
        </p>
      </statement>
      <image xml:id="FAEXM26b" with="50%">
        <latex-image>
          \begin{tikzpicture}[scale=0.2]
          \tikzstyle{every node}+=[inner sep=0pt]
          \draw [black] (21.5,-18.4) circle (3);
          \draw (21.5,-18.4) node {$A$};
          \draw [black] (35.3,-18.4) circle (3);
          \draw (35.3,-18.4) node {$B$};
          \draw [black] (48.2,-18.4) circle (3);
          \draw (48.2,-18.4) node {$C$};
          \draw [black] (48.2,-18.4) circle (2.4);
          \draw [black] (30.3,-28.8) circle (3);
          \draw (30.3,-28.8) node {$\emptyset$};
          \draw [black] (15.3,-12) -- (19.41,-16.25);
          \fill [black] (19.41,-16.25) -- (19.22,-15.32) -- (18.5,-16.02);
          \draw [black] (24.262,-17.242) arc (106.76292:73.23708:14.349);
          \fill [black] (32.54,-17.24) -- (31.92,-16.53) -- (31.63,-17.49);
          \draw (28.4,-16.13) node [above] {$0$};
          \draw [black] (38.07,-17.263) arc (105.91066:74.08934:13.425);
          \fill [black] (45.43,-17.26) -- (44.8,-16.56) -- (44.52,-17.52);
          \draw (41.75,-16.25) node [above] {$1$};
          \draw [black] (47.183,-21.21) arc (7.83937:-280.16063:2.25);
          \draw (42.8,-24.55) node [left] {$1$};
          \fill [black] (45.35,-19.3) -- (44.49,-18.92) -- (44.63,-19.91);
          \draw [black] (30.287,-25.811) arc (-188.14949:-223.20414:10.232);
          \fill [black] (30.29,-25.81) -- (30.9,-25.09) -- (29.91,-24.95);
          \draw (30.49,-21.76) node [left] {$0$};
          \draw [black] (27.618,-27.469) arc (-122.62442:-156.90286:13.788);
          \fill [black] (27.62,-27.47) -- (27.21,-26.62) -- (26.67,-27.46);
          \draw (23.98,-26.2) node [left] {$1$};
          \draw [black] (32.98,-27.477) arc (144:-144:2.25);
          \draw (37.55,-28.8) node [right] {$0,1$};
          \fill [black] (32.98,-30.12) -- (33.33,-31) -- (33.92,-30.19);
          \draw [black] (23.579,-16.242) arc (131.0604:48.9396:17.159);
          \fill [black] (23.58,-16.24) -- (24.51,-16.09) -- (23.85,-15.34);
          \draw (34.85,-11.52) node [above] {$0$};
          \end{tikzpicture}
        </latex-image>
      </image>
      <hint>
        <p>
          Come up with some test strings and their parce paths. Are there any patterns of repetition?
        </p>
        <ul>
        <li>
          <m>s^{(0)} = 01:</m>
          <tabular>
              <row header="no">
                <cell right="medium"> States </cell>
                <cell right="minor" bottom ="minor">A</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">B</cell>
                <cell right="minor" bottom ="minor"> </cell>
                <cell right="minor" bottom ="minor">C</cell>
              </row>
              <row header="no">
                <cell right="medium">String</cell>
                <cell right="minor" > </cell>
                <cell right="minor" >0</cell>
                <cell right="minor" > </cell>
                <cell right="minor" >1</cell>
                <cell right="minor" > </cell>
              </row>
            </tabular>
        </li>
        <li>
          <m>s^{(1)} = 01001:</m>
          <tabular>
              <row header="no">
                <cell right="medium"> States </cell>
                <cell right="minor"  bottom ="minor">A</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">B</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">C</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">A</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">B</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">C</cell>
              </row>
              <row header="no">
                <cell right="medium">String</cell>
                <cell right="minor" > </cell>
                <cell right="minor" >0</cell>
                <cell right="minor" > </cell>
                <cell right="minor" >1</cell>
                <cell right="minor" > </cell>
                <cell right="minor" >0</cell>
                <cell right="minor" > </cell>
                <cell right="minor" >0</cell>
                <cell right="minor" > </cell>
                <cell right="minor" >1</cell>
                <cell right="minor" > </cell>
              </row>
            </tabular>
        </li>
        <li>
          <m>s^{(2)} = 01001111:</m>
          <tabular>
              <row header="no">
                <cell right="medium"> States </cell>
                <cell right="minor"  bottom ="minor">A</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">B</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">C</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">A</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">B</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">C</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">C</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">C</cell>
                <cell right="minor"  bottom ="minor"> </cell>
                <cell right="minor"  bottom ="minor">C</cell>
              </row>
              <row header="no">
                <cell right="medium">String</cell>
                <cell right="minor"> </cell>
                <cell right="minor">0</cell>
                <cell right="minor"> </cell>
                <cell right="minor">1</cell>
                <cell right="minor"> </cell>
                <cell right="minor">0</cell>
                <cell right="minor"> </cell>
                <cell right="minor">0</cell>
                <cell right="minor"> </cell>
                <cell right="minor">1</cell>
                <cell right="minor"> </cell>
                <cell right="minor">1</cell>
                <cell right="minor"> </cell>
                <cell right="minor">1</cell>
                <cell right="minor"> </cell>
                <cell right="minor">1</cell>
                <cell right="minor"> </cell>
              </row>
            </tabular>
        </li>
      </ul>
      </hint>
      <answer>
        <p>
          A patter of state repition is: <m>A</m> to <m>B</m> to <m>C</m>.
        </p>
      </answer>
    </exercise>
    <exercise>
      <statement>
        <p>
          Identify patterns of state repetition from a written language. 
          <me>
            L_2 = \{\mbox{any string with an odd number of 0s, starts with 1, ends with 111, and has at least two 0s}\}
          </me>
        </p>
      </statement>
      <hint>
        <p>
          Some test strings inlcude: 
          <ul>
            <li>
              <m>s^(0) = 1000111</m>
            </li>
            <li>
              <m>s^(1) = 10100111</m>
            </li>
            <li>
              <m>s^(2) = 1000000011111</m>
            </li>
          </ul>
        </p>
      </hint>
      <answer>
        <p>
          Character repetitions can exist in these two places:
          <ul>
            <li>
              <m>10(00)^*111</m>
            </li>
            <li>
              <m>10(1)^*00111</m>
            </li>
          </ul>
          They can also be combined.
        </p>
      </answer>
    </exercise>
    <exercise>
      <statement>
        <p>
          Prove <m>L_{xx}</m> is regular or not.
        </p>
        <me>
          L_{xx}=\{w\#w | w \mbox{ is any binary string}\}
        </me>
        <me>
          \Sigma = \{0,1,\#\}
        </me>
      </statement>
    </exercise>
    <exercise>
      <statement>
        <p>
          Prove <m>L_{ab}</m> is regular or not.
        </p>
        <me>
          L_{ab}=\{(ab)^n|n \geq 100\}
        </me>
        <me>
          \Sigma = \{a,b\}
        </me>
      </statement>
    </exercise>
    <exercise>
      <statement>
        <p>
          Prove <m>L_{a}</m> is regular or not.
        </p>
        <me>
          L_{a}=\{a^{2^n}|n \geq 0\}
        </me>
        <me>
          \Sigma = \{a\}
        </me>
      </statement>
    </exercise>
  </exercises>
    <!--
  <xi:include href=".sec-emp-intro.ptx" />
  <xi:include href=".sec-emp-next.ptx" />
  <xi:include href=".sec-emp-conc.ptx" /> 
  -->

</chapter>
