<?xml version='1.0' encoding='utf-8'?>


<chapter xml:id="ch-dfas" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Determinsitic Finite Automata</title>
  <objectives>
    In this chapter you will learn:
     <ol>
       <li> The definition of determinism </li>
       <li> Finite automata (FA) </li>
       <li> Deterministic Finite Automata (DFA) </li>
       <li> Strategies for understanding Deterministic Finite Automata </li>
       <li> Strategies for drawing Deterministic Finite Automata </li>
     </ol>
  </objectives>


   <section xml:id="Determinism">
      <title> Determinism </title>
      <subsection>
        <title>Set Review</title>
        <p>The <idx>Alphabet (<m>\Sigma</m>)</idx> <term>alphabet (<m>\Sigma</m>)</term> is the finite set of all possible characters in a language.
        Characters in the alphabet can be appended together to create strings. These strings can be used in a set of recognizable
        strings, also known as a <idx>Language(<em><m>L</m></em>)</idx> <term>language(<em><m>L</m></em>)</term>.
        </p>
        <p>
        For example, characters <m>a</m>, <m>b</m>, and <m>c</m> are all included in alphabet <m>A</m>. 
        <me>\Sigma_{A} = \{a, b, c\}</me>
        Alphabets can include the empty string <m>\epsilon</m> and all characters in the alphabet can be used to create strings such as <m>S</m> and <m>Q</m>
        <me>S = baba</me>
        <me>T = aaaaa</me>
        these example strings may be included in language <m>A</m>
        <me>L_{A}\in(S, T)</me>
        </p>
      </subsection>
      <subsection>
      <!-- todo: Should determinism come before finite automata and the explinantion of states? I feel like 
      explaining vocabularly, examples of languages in CS terms students would know at this point, and 
      some sort of example of how to think about these concepts could be useful to provide background
      before going into states and automata and determinism. I am also a little confused as to how to explain
      determinism at this point. -->
        <title>Deterministic</title> 
        <p>
        <idx>Determinisim</idx> <term>Determinisim</term> means that all transitions of state are unique and completly defined.
        </p>
      </subsection>
   </section>
   <section xml:id="FiniteAutomata">
      <title>Finite Automata (FA)</title>
        <p><idx>Finite Automata (FA)</idx> <term>Finite Automata (FA) </term> are <idx>State Machine (M)</idx> <term>state machines (M)</term> that describe a language. They have no memory storage,
          but they utilize <idx>States (Q)</idx> <term>states (Q)</term> to determine if a given string exists in the language of the machine. States are 
          represented using circles and machines are made up of states and arrows connecting them. There is also one arrow without
          a beginning state. This arrow points to the start state which is where the machine diagram begins. There are also states with two circles,
          these are accept states. When a string finishing parsing on an accept state, then it is included in the language of the machine.
         </p>
      <image source="../generated/latex-image/FAExM1.svg" width="50%">
        </image>
        <!--TODO: I would like to try and make animations to show this next part instead of writing it out.-->
         <p>
          Say there is a string <m>S = 110</m>. After following the arrows to parce through <m>S</m>,
          it would be accepted by <m>M_1</m> as it finished on the accept state. We now know that <m>L(M_1)\in S</m>,
          but what is <m>L(M_1)</m>?
         </p>
         <p>
          Lanugages can be defined using plain language, expressions, or FAs. The following all represent the same language.
         <ul>
            <li><me>L_2 = \mbox{any string that ends with 01}</me></li>
            <li><me>L_2 = {s01 | \mbox{where s is a string made of only 0s and 1s}}</me></li>
            <li><image source="../generated/latex-image/FAExM2.svg" width="50%">
                </image>
              </li>
            </ul>
          </p>
          <p>
          The language of a FA can be determined by creating test strings from characters in the given alphabet and
          checking them using a given machine. For <m>M_2</m>, test strings could include 000, 01, 11011, and 100001. By 
          tracing through <m>M_2</m>, it can be seen that it would only accept on the second and fourth strings, the only
          ones ending in 01. This is a straight-forward example, and many more test strings could be needed to determine 
          the languages of other machines.
        </p>
    </section>
   <section xml:id="DFAs">
      <title>Deterministic Finite Automata (DFA)</title>
        <p><idx>Deterministic Finitie Automata (DFA)</idx> <term> Determinisitic Finite Automatas (DFA)</term> are FAs where the outcome of each possible change 
          of state is defined. When trying to categorize a FA as deterministic, we can look to see if all characters in the alphabet are
          accounted for at each state. We can look again at <m>M_1</m>
       </p>
        <image source="../generated/latex-image/FAExM1.svg" width="50%">
        </image>
          <!--TODO: again I would like to figure out how to make animations for this next part-->
        <p>
          The alphabet of <m>M_1</m> includes 0 and 1. When at the start state <m>A</m>, if a 0 is read, we stay at <m>A</m> 
          and if a 1 is read, we move to <m>B</m>. Each possibility is accounted for. When in state <m>B</m>, if a 0 is read,
          we stay at <m>B</m> and if a 1 is read, we move to <m>A</m>. Since there is a definied path for each potential character
          at each state, then the FA is deterministic, or a DFA. 
        </p>
        <p>
          Looking at this in chart form is a helpful way to check for determinism. As there is an entry for each potential charachter
          at each state, the FA is deterministic.
        </p>
        <sidebyside>
          <table xml:id="DFADeterminismTable">
            <title>Determinism Chart for <m>M_1</m></title>
            <tabular>
              <row header="yes"><cell right="medium" bottom ="minor"> </cell><cell bottom ="minor">1</cell><cell bottom ="minor">0</cell></row>
              <row header="no"><cell right="medium"><m>A</m></cell><cell><m>A</m></cell><cell><m>B</m></cell></row>
              <row header="no"><cell right="medium"><m>B</m></cell><cell><m>B</m></cell><cell><m>A</m></cell></row>
            </tabular>
          </table>
        </sidebyside>
   </section>
   <section>
      <title> Strategies for Understanding DFAs</title>
   </section>
   <section>
      <title> Strategies for Drawing DFAs </title>
   </section>

  <exercises xml:id="ch-dfas-exercises">
    <exercise>
      <statement>
        <p>
          What is the language of <m>M_3</m>?
        </p>
         <image source="../generated/latex-image/FAExM3.svg" width="50%">
        </image>
      </statement>
      <!--TODO: I choose to include the extra example and such here as it was included in the notes, we may want to shift
      its placement around at some point. I think it has real value as a chapter example or as a challenge problem.-->
      <hint>
        <p>
          Come up with ten strings in the language of <m>M_3</m>. 
          <table>
            <tabular>
              <row><cell right="minor">1</cell><cell>0</cell></row>
              <row><cell right="minor">2</cell><cell>101101</cell></row>
              <row><cell right="minor">3</cell><cell><m>\epsilon</m></cell></row>
              <row><cell right="minor">4</cell><cell>010101</cell></row>
              <row><cell right="minor">5</cell><cell>0000</cell></row>
              <row><cell right="minor">6</cell><cell>011</cell></row>
              <row><cell right="minor">7</cell><cell>10010</cell></row>
              <row><cell right="minor">8</cell><cell>111001</cell></row>
              <row><cell right="minor">9</cell><cell>1001</cell></row>
              <row><cell right="minor">10</cell><cell>0110</cell></row>
            </tabular>
          </table>
        </p>
        <p>
          Come up with ten strings NOT in the language of <m>M_3</m>. 
          <table>
            <tabular>
              <row><cell right="minor">1</cell><cell>1</cell></row>
              <row><cell right="minor">2</cell><cell>100</cell></row>
              <row><cell right="minor">3</cell><cell>10</cell></row>
              <row><cell right="minor">4</cell><cell>10001</cell></row>
              <row><cell right="minor">5</cell><cell>1011</cell></row>
              <row><cell right="minor">6</cell><cell>11111</cell></row>
              <row><cell right="minor">7</cell><cell>101</cell></row>
              <row><cell right="minor">8</cell><cell>1101</cell></row>
              <row><cell right="minor">9</cell><cell>10110</cell></row>
              <row><cell right="minor">10</cell><cell>001</cell></row>
            </tabular>
          </table>
        </p>
        <p>
          Do you see any patterns?
        </p>
      </hint>
      <answer>
        <p>
          <me>L(M_3) = \mbox{the empty string and all binary strings divisible by 3}</me>
        </p>
      </answer>
      <solution>
        <p>
          It is helpful to look at patterns beyond those that are obvious and to consider ones that require 
          a certain level of interpretation. Consider the test string lists from the hint, but this time the decimal
          number is included.
          <table>
            <tabular>
              <row><cell>1</cell><cell>0</cell><cell>(0)</cell></row>
              <row><cell>2</cell><cell>101101</cell><cell>(45)</cell></row>
              <row><cell>3</cell><cell><m>\epsilon</m></cell><cell>_</cell></row>
              <row><cell>4</cell><cell>010101</cell><cell>(21)</cell></row>
              <row><cell>5</cell><cell>0000</cell><cell>(0)</cell></row>
              <row><cell>6</cell><cell>011</cell><cell>(3)</cell></row>
              <row><cell>7</cell><cell>10010</cell><cell>(18)</cell></row>
              <row><cell>8</cell><cell>111001</cell><cell>(57)</cell></row>
              <row><cell>9</cell><cell>1001</cell><cell>(9)</cell></row>
              <row><cell>10</cell><cell>0110</cell><cell>(6)</cell></row>
            </tabular>
          </table>
        </p>
      </solution>
    </exercise>
    <exercise>
      <statement>
        <p>
          What is the language of <m>M_4</m>?
        </p>
         <image source="../generated/latex-image/FAExM4.svg" width="50%">
        </image>
      </statement>
      <hint>
        <p>
          Come up with a few test strings. See any patterns? Focus on the plain language description.
        </p>
      </hint>
      <answer>
        <p>
          <me>L(M_5) = \mbox{any string that contains 01}</me>
        </p>
      </answer>
      <solution>
        <p>
          <ul>
            <li>A great first step is to walk through the shortest path to the accept state. This would be 01.</li>
            <li>It is also helpful to think about the longest possible path to the accept state or the longest string that would still be accepted. 
                For <m>M_5</m>, that is any number of 1s, followed by at least one 0, followed by at least one 1, and can have 
                any amount of 0s and 1s after that. At least one 0 and at least one 1 is required for <m>M_5</m> to accept.</li>
            <li>Another note, the string <q>01</q> must be included as a 1 must come after a 0 to get to the accept state <m>C</m>.</li>
          </ul>
        </p>
      </solution>
    </exercise>
    <exercise>
      <statement>
        <p>
        Build a machine for language 5 (<m>L_5</m>).
        <me>L_5 = \mbox{any number of }01 \mbox{ repeated}</me>
        <!--TODO: Is it called a drop state? I would like to add in the drop state before this point.-->
        </p>
      </statement>
      <answer>
          <image source="../generated/latex-image/FAExM5.svg" width="50%">
        </image>
       </answer>
      </exercise>
    <exercise>
      <statement>
      <p>
        What is the language of <m>M_6</m>?
      </p>
        <image source="../generated/latex-image/FAExM6.svg" width="50%">
        </image>
      </statement>
      <hint>
        <p>
          Machines can have other alphabets. What is the alphabet of this machine's language?
        </p>
      </hint>
      <answer>
        <p>
          <me>L(M_7) = \mbox{any string that starts with } ba \mbox{ followed by any amount of } a \mbox{s and } b \mbox{s}</me>
        </p>
      </answer>
    </exercise>
    <exercise>
      <statement>
        <p>
          Use the diagram below to create a DFA that can track mod 7 for any binary number. 
          <image source="../generated/latex-image/DFA-M26.svg" width="50%">
        </image>
        </p>
      </statement>
    </exercise>
  </exercises>

    <!--
  <xi:include href=".sec-emp-intro.ptx" />
  <xi:include href=".sec-emp-next.ptx" />
  <xi:include href=".sec-emp-conc.ptx" /> 
  -->

</chapter>
