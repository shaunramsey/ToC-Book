<?xml version='1.0' encoding='utf-8'?>

<chapter xml:id="ch-cfgs" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Context Free Grammars (CFGs)</title>
  <objectives>
    In this chapter you will learn:
     <ol>
       <li> Context Free Grammars </li>
       <li> Terminals </li>
       <li> Parse Trees </li>
       <li> Ambiguous and Inherently Ambiguous </li>
     </ol>
  </objectives>


   <section xml:id="CFGs">
      <title> Context Free Grammars (CFGs) </title>
      <subsection xml:id="subsec-RLReview">
        <title>Regular Languages Review</title>
          <p>
            To best understand CFGs, we must understand how they differ from Regular Languages. Regular Languages: 
            <ul>
              <li>
                <p>
                  have no memory - they use states
                </p>
              </li>
              <li>
                <p>
                  have modular looping - they use state transitions
                </p>
              </li>
              <li>
                <p>
                  can be expressed in Regular Expressions, Deterministic Finite Automata, and Non-Deterministic Finite Automata
                </p>
              </li>
            </ul>
            In order to build upon Regular Languages, we move to constructions that allow some limited forms of matching.
            Context Free Languages come about when Regular Languages have access to stack memory, and they are expressed through
            Context Free Grammars.
          </p>
      </subsection>
      <subsection xml:id="subsec-CFGintro">
        <title>Basics of Context Free Grammars</title>
        <p>
          <idx><h>Context Free Grammars (CFGs)</h></idx> <term>Context Free Grammars (CFGs)</term> consist of a series of rules or 
          productions. 
          <tabular>
            <row>
              <cell><m>CFG_1:</m></cell> <cell></cell> 
            </row>
            <row>
              <cell></cell> <cell><m>S \rightarrow aSb|T</m></cell> 
            </row>
            <row>
              <cell></cell> <cell><m>T \rightarrow cTd|cd</m></cell> 
            </row>
          </tabular>
        </p>
      </subsection>
      <p>
        Each line of a CFG is called a <idx><h>Rule</h></idx> <term>rule</term>. The left hand side of a rule is always a 
        <idx><h>Variable (in CFGs)</h></idx> <term>variable</term>. Variables are denoted by uppercase letters. The right 
        hand side of a rule is some combination terminals and variables. <idx><h>Terminal</h></idx> <term>Terminals</term> 
        can be elements of the alphabet of the Context Free Language or the empty string (<m>\epsilon</m>). They are denoted
        by lower case letters.
      </p>
      <p>
        CFGs have a start variable, it is usually on the left hand side of the first rule and is denoted with <m>S</m>. To produce 
        strings, variables are replaced by one of the options avaliable on the production's right hand side. In a production rule, <m>|</m> is used to mean
        OR. The left hand side can be replaced by one of the right hand side. 
      </p>
      <p>
        Here is a sample derivation from <m>CFG_1</m>: 
        <tabular>
          <row>
            <cell halign='center'><m>S \rightarrow aSb</m></cell><cell><m>S</m> is replaced by <m>aSb</m></cell>
          </row>
          <row>
            <cell halign='center'><m>aSb \rightarrow aTb</m></cell><cell>The <m>S</m> in <m>aSb</m> is relapced with <m>T</m></cell>
          </row>
          <row>
            <cell halign='center'><m>aTb \rightarrow acTdb</m></cell><cell>The <m>T</m> in <m>aTb</m> is replaced with <m>aTd</m></cell>
          </row>
          <row>
            <cell halign='center'><m>acTdb \rightarrow accddb</m></cell><cell><m>T</m> in <m>acTdb</m> is replaced by <m>cd</m></cell>
          </row>
        </tabular>
        This makes the final string: <m>accddb</m>.
      </p>
      <exploration>
      <p>
        Consider the following grammar:
        <tabular>
          <row>
            <cell><m>CFG_2</m>:</cell><cell></cell>
          </row>
          <row>
            <cell></cell><cell><m>S \rightarrow aS | \epsilon</m></cell>
          </row>
        </tabular>
        What strings can we make from it?
        <tabular>
          <row>
            <cell><m>\epsilon</m>:</cell><cell></cell>
          </row>
          <row>
            <cell></cell><cell halign='center'><m>S \rightarrow \epsilon</m></cell><cell><m>S</m> is replaced by <m>\epsilon</m></cell>
          </row>
          <row>
            <cell></cell><cell></cell>
          </row>
          <row>
            <cell><m>a</m>:</cell><cell></cell>
          </row>
          <row>
            <cell></cell><cell halign='center'><m>S \rightarrow aS</m></cell><cell><m>S</m> is replaced by <m>aS</m></cell>
          </row>
          <row>
              <cell></cell><cell halign='center'><m>aS \rightarrow a\epsilon</m></cell><cell><m>S</m> is replaced by <m>\epsilon</m></cell>
          </row>
          <row>
            <cell><m>aa</m>:</cell><cell></cell>
          </row>
          <row>
            <cell></cell><cell halign='center'><m>S \rightarrow aS</m></cell><cell><m>S</m> is replaced by <m>aS</m></cell>
          </row>
          <row>
              <cell></cell><cell halign='center'><m>aS \rightarrow aaS</m></cell><cell><m>S</m> is replaced by <m>aS</m></cell>
          </row>
          <row>
              <cell></cell><cell halign='center'><m>aaS \rightarrow aa</m></cell><cell><m>S</m> is replaced by <m>\epsilon</m></cell>
          </row>
        </tabular>
        And many more strings can be made! But, what languge is this?
      </p>
      <p>
        The language of this grammar is any amount of <m>a</m>s concatenated. 
      </p>
      </exploration>
      <exploration>
        <p>
        Consider the following grammar:
        <tabular>
          <row>
            <cell><m>CFG_3</m>:</cell><cell></cell>
          </row>
          <row>
            <cell></cell><cell><m>S \rightarrow 0S1 | \epsilon</m></cell>
          </row>
        </tabular>
        What strings can we make from it?
        <answer>
        <tabular>
          <row>
            <cell><m>\epsilon</m>:</cell><cell></cell>
          </row>
          <row>
            <cell></cell><cell halign='center'><m>S \rightarrow \epsilon</m></cell><cell><m>S</m> is replaced by <m>\epsilon</m></cell>
          </row>
          <row>
            <cell></cell><cell></cell>
          </row>
          <row>
            <cell><m>01</m>:</cell><cell></cell>
          </row>
          <row>
            <cell></cell><cell halign='center'><m>S \rightarrow 0S1</m></cell><cell><m>S</m> is replaced by <m>0S1</m></cell>
          </row>
          <row>
              <cell></cell><cell halign='center'><m>0S1 \rightarrow 0\epsilon 1</m></cell><cell><m>S</m> is replaced by <m>\epsilon</m></cell>
          </row>
          <row>
            <cell><m>0011</m>:</cell><cell></cell>
          </row>
          <row>
            <cell></cell><cell halign='center'><m>S \rightarrow 0S1</m></cell><cell><m>S</m> is replaced by <m>0S1</m></cell>
          </row>
          <row>
              <cell></cell><cell halign='center'><m>0S1 \rightarrow 00S11</m></cell><cell><m>S</m> is replaced by <m>0S1</m></cell>
          </row>
          <row>
              <cell></cell><cell halign='center'><m>00S11 \rightarrow 00\epsilon 11</m></cell><cell><m>S</m> is replaced by <m>\epsilon</m></cell>
          </row>
        </tabular>
        </answer>
        And many more strings can be made! But, what languge is this?
      </p>
      <p>
        The language of this grammar is any amount of 0s followed by the same amount of 1s.
      </p>
      </exploration>
      <exploration>
        <p>
          Let us consider a grammar with multiple variables. 
          <tabular>
            <row>
              <cell><m>CFG_4</m>:</cell><cell></cell>
            </row>
            <row>
              <cell></cell><cell><m>S \rightarrow aS | T | \epsilon</m></cell>
            </row>
            <row>
              <cell></cell><cell><m>T \rightarrow bT | \epsilon</m></cell>
            </row>
          </tabular>
          </p>
          <p>
          Can we generate only <m>a</m>s?
          <tabular>
            <row>
              <cell><m>S \rightarrow aS</m></cell><cell><m>S</m> is replaced by <m>aS</m></cell>
            </row>
            <row>
              <cell><m>aS \rightarrow aaS</m></cell><cell><m>S</m> is replaced by <m>aS</m></cell>
            </row>
            <row>
              <cell><m>aaS \rightarrow aa\epsilon</m></cell><cell><m>S</m> is replaced by <m>\epsilon</m></cell>
            </row>
          </tabular>
          The resulting string is <m>aa</m>. Therefore, <m>CFG_4</m> can generate only <m>a</m>s.
        </p>
        <p>
          Can we generate only <m>b</m>s? How?
          <answer>
          <tabular>
            <row>
              <cell><m>S \rightarrow T</m></cell><cell><m>S</m> is replaced by <m>T</m></cell>
            </row>
            <row>
              <cell><m>T \rightarrow bT</m></cell><cell><m>T</m> is replaced by <m>T</m></cell>
            </row>
            <row>
              <cell><m>bT \rightarrow bbT</m></cell><cell><m>T</m> is replaced by <m>bT</m></cell>
            </row>
            <row>
              <cell><m>bbT \rightarrow bb\epsilon</m></cell><cell><m>T</m> is replaced by <m>\epsilon</m></cell>
            </row>
          </tabular>
          </answer>
          The resulting string is <m>bb</m>. Therefore, <m>CFG_4</m> can generate only <m>b</m>s.
        </p>
        <p>
          What are some other strings that we can generate using <m>CFG_4</m>?
          <ul>
            <li>
              <p>
                <m>ab</m>
              </p>
            </li>
            <li>
              <p>
                <m>aaabb</m>
              </p>
            </li>
            <li>
              <p>
                <m>abbbbbb</m>
              </p>
            </li>
          </ul>
          The language of this grammar is the empty string or any amount of <m>a</m>s followed by any amount of <m>b</m>s.
        </p>
      </exploration>
      <subsection xml:id="subsec-rexToCFG">
        <title>Creating CFGs from Regular Expressions</title>
        <p>
          Any Regular Expression is a Context Free Language and can easily be implemented into a CFG using the bellow framework: 
          <ul>
            <li>
              <p>
                union is an <m>|</m>, another rule
              </p>
            </li>
            <li>
              <p>
                concatenation is a <m>V \rightarrow V_1v_2</m> rule
              </p>
            </li>
            <li>
              <p>
                * is a <m>S \rightarrow stringS | \epsilon</m> rule
              </p>
            </li>
          </ul>
          Let us look a little ddeper into matching with another exploration.
          </p>
          <exploration>
            <p>
              Construct a CFG for <m>L_5</m> where <me>
                L_5 = \{a^i(bc)^i | i \geq 0 \}
              </me>
              Before looking at the correct grammar, let's first analyze some common incorrect answers.
              <m>CFG_5'</m> below demonstrates one common mistake: 
              <tabular>
                <row>
                  <cell><m>CFG_5'</m>:</cell><cell></cell>
                </row>
                <row>
                  <cell></cell><cell><m>S \rightarrow ASB | \epsilon</m></cell>
                </row>
                <row>
                  <cell></cell><cell><m>A \rightarrow aA | \epsilon</m></cell>
                </row>
                <row>
                  <cell></cell><cell><m>B \rightarrow bcB | \epsilon</m></cell>
                </row>
              </tabular>
              But, why is <m>CFG_5'</m> incorrect? Construct some strings using this grammar. 
              <ul>
                <li>
                  <p>
                    abc
                  </p>
                </li>
                <li>
                  <p>
                    aabcbc
                  </p>
                </li>
                <li>
                  <p>
                    aabcbc
                  </p>
                </li>
                <li>
                  <p>
                    aaaaaaa
                  </p>
                </li>
              </ul>
              But, how did the string <m>abcbc</m> come about from <m>CFG_5'</m>?
              <tabular>
                <row>
                  <cell><m>S \rightarrow ASB</m></cell><cell><m>S</m> is replaced by <m>ASB</m></cell>
                </row>
                <row>
                  <cell><m>ASB \rightarrow aSB</m></cell><cell>The <m>A</m> is replaced by <m>a</m></cell>
                </row>
                <row>
                  <cell><m>aSB \rightarrow aASBB</m></cell><cell>The <m>S</m> is replaced by <m>ASB</m></cell>
                </row>
                <row>
                  <cell><m>aASBB \rightarrow aaSBB</m></cell><cell>The <m>A</m> is replaced by <m>a</m></cell>
                </row>
                <row>
                  <cell><m>aaSBB \rightarrow aaBB</m></cell><cell>The <m>S</m> is replaced by <m>\epsilon</m></cell>
                </row>
                <row>
                  <cell><m>aaBB \rightarrow aabcB</m></cell><cell>The <m>B</m> is replaced by <m>bc</m></cell>
                </row>
                <row>
                  <cell><m>aabcB \rightarrow aabc</m></cell><cell>The <m>B</m> is replaced by <m>\epsilon</m></cell>
                </row>
              </tabular>
              By not forcing the <m>a</m> and <m>bc</m> to be created at the same time and inculding an epsilon, then 
              it is possible to a string to be created that is not in the language.
              </p>
              <p>
              Below is the correct grammar for <m>L_5</m>.
              </p>
              <answer>
            <tabular>
            <row>
              <cell><m>CFG_5</m>:</cell><cell></cell>
            </row>
            <row>
              <cell></cell><cell><m>S \rightarrow aSbc | \epsilon</m></cell>
            </row>
          </tabular>
          </answer>
          <p>
            We can see that matched pairs must be contained in the same rule.
            </p>
          </exploration>
          <p>
            Following our thinking from the exploration, we can see that interleaved matching does not work within 
            Context Free Grammars. An example is this would be a a language where <me>
              L = \{ 0^n1^m0^n1^m\}
            </me>
            Matching three groupings also does not work. An example of this would be:
            <me>
              L = \{0^n1^n0^n\}
            </me>
         </p>
         <example>
           <p>
             Here is an example that is applicable to more general computer science. Imagine parsing a computer program. You have run a REX which returns these terminals:
             <tabular>
               <row>
                 <cell>b</cell><cell>boolean expressions</cell>
               </row>
               <row>
                 <cell>i</cell><cell>an <m>if</m> keyword</cell>
               </row>
               <row>
                 <cell>c</cell><cell>a code statement</cell>
               </row>
               <row>
                 <cell>e</cell><cell>an <m>else</m> keyword</cell>
               </row>
               <row>
                 <cell>f</cell><cell>an <m>elif</m> keyword</cell>
               </row>
               <row>
                 <cell>:</cell><cell>a colon</cell>
               </row>
             </tabular>
             Write the CFG using <m>b</m>,<m>i</m>,<m>c</m>,<m>e</m>,<m>f</m>, and <m>:</m> for Python <m>if</m> statements. You may ignore returns and tabbing.
           </p>
           <answer>
           <tabular>
            <row>
              <cell><m>CFG</m>:</cell><cell></cell>
            </row>
            <row>
              <cell></cell><cell><m>S \rightarrow iB:CFE</m></cell>
            </row>
            <row>
              <cell></cell><cell><m>B \rightarrow bB | b</m></cell>
            </row>
            <row>
              <cell></cell><cell><m>C \rightarrow cC | c</m></cell>
            </row>
            <row>
              <cell></cell><cell><m>F \rightarrow fB:C | FF | \epsilon</m></cell>
            </row>
            <row>
              <cell></cell><cell><m>E \rightarrow e:C | \epsilon</m></cell>
            </row>
          </tabular>
          </answer>
          <p>
          The CDFG can also be written as seen below.
          </p>
          <answer>
          <tabular>
            <row>
              <cell><m>CFG</m>:</cell><cell></cell>
            </row>
            <row>
              <cell></cell><cell><m>S \rightarrow ib:U_1U_2U_3 | \epsilon</m></cell>
            </row>
            <row>
              <cell></cell><cell><m>U_1 \rightarrow cU_1 | c</m></cell>
            </row>
            <row>
              <cell></cell><cell><m>U_2 \rightarrow fB:U_1U_2 | \epsilon</m></cell>
            </row>
            <row>
              <cell></cell><cell><m>U_3 \rightarrow e:U_1 | \epsilon</m></cell>
            </row>
          </tabular>
         </answer>
         </example>
      </subsection>
      </section>

      <section xml:id="subsec-parsetrees">
        <title>Parse Trees</title>
          <p>
            Derivations are often drawn as a tree so that precedence and matching is clean. We will consider <m>CFG_1</m> for this example.
            <tabular>
            <row>
              <cell><m>CFG_1:</m></cell> <cell></cell> 
            </row>
            <row>
              <cell></cell> <cell><m>S \rightarrow aSb|T</m></cell> 
            </row>
            <row>
              <cell></cell> <cell><m>T \rightarrow cTd|cd</m></cell> 
            </row>
          </tabular>
          We list the string at the bottom of the tree with the starting variable at the top. For the first example we will follow the derrivation that creates 
          <m>accddb</m>. It is repeated below and has been numbers for convinence: 
          <tabular>
            <row>
              <cell halign='center'>1) <m>S \rightarrow aSb</m></cell>
              <cell halign='center'>2) <m>aSb \rightarrow aTb</m></cell>
            </row>
            <row>
              <cell halign='center'><m>S</m> is replaced by <m>aSb</m></cell>
              <cell halign='center'>The <m>S</m> in <m>aSb</m> is relapced with <m>T</m></cell>
            </row>
            <row>
              <cell halign='left'>
                <image source="../generated/latex-image/CFExT1a.svg" width="20%">
                </image>
              </cell>
              <cell halign='left'>
                <image source="../generated/latex-image/CFExT1b.svg" width="50%">
	              </image>
              </cell>
            </row>
            <row>
              <cell halign='center'>3) <m>aTb \rightarrow acTdb</m></cell>
              <cell halign='center'>4) <m>acTdb \rightarrow accddb</m></cell>
            </row>
            <row>
              <cell halign='center'>The <m>T</m> in <m>aTb</m> is replaced with <m>aTd</m></cell>
              <cell halign='center'><m>T</m> in <m>acTdb</m> is replaced by <m>cd</m></cell>
            </row>
            <row>
              <cell halign='center'>
                <image source="../generated/latex-image/CFExT1c.svg" width='60%'>
                </image>
              </cell>
              <cell halign='center'>
                <image source="../generated/latex-image/CFExT1d.svg" width='60%'>
	            </image>
              </cell>
            </row>
          </tabular>
          </p>
          <p>
            Here, you can see the <m>c</m> and <m>d</m> matching and the <m>a</m> and <m>b</m> matching a little more clearly.
          </p>
          <exploration xml:id="exp-AmbIntro">
            <statement>
            <p>
              Let's work through another example from <m>CFG_5</m>: 
              <tabular>
                <row>
                  <cell><m>CFG_5:</m></cell><cell></cell>
                </row>
                <row>
                  <cell></cell><cell><m>E \rightarrow E+E | E*E | 0 | 1</m></cell>
                </row>
              </tabular>
            </p>
              <p>
                We will create the parse tree for the string <m>1+1*0</m>. 
              </p>
            
            <p>
              <tabular>
                <row>
                  <cell>First, we will need <m>E + E</m> to give us <m>1 + E</m></cell>
                  <cell halign='center'>
                    <image source="../generated/latex-image/CFExT2a.svg" width="50%">
	                  </image>
                  </cell>
                </row>
                <row>
                  <cell>Second, we will need <m>E</m> to give us <m>E * E</m></cell>
                  <cell halign='center'>
                    <image source="../generated/latex-image/CFExT2b.svg">
	                  </image>
                  </cell>
                </row>
                <row>
                  <cell>Third, we will need <m>E</m> to give us <m>1</m></cell>
                  <cell halign='center'>
                    <image source="../generated/latex-image/CFExT2c.svg">
	                  </image>
                  </cell>
                </row>
                <row>
                  <cell>Finally, we will need <m>E</m> to give us <m>0</m></cell>
                  <cell halign='center'>
                    <image source="../generated/latex-image/CFExT2d.svg" width="50%">
	                  </image>
                  </cell>
                </row>
              </tabular>
            </p>
            <p>
              But, there is another way to arrive at this string using <m>CFG_5</m>. Try drawing the parse tree for it.
            </p>
            </statement>
            <answer>
              <p>
                <image source="../generated/latex-image/CFExT2e.svg" width="20%">
	              </image>
              </p>
            </answer>   
          </exploration>
    </section>
    <section xml:id="sec-Ambiguity">
      <title>Ambiguity</title>
      <p>
        <idx>Ambiguous</idx> <term>Abmibuous</term> grammars can generate some string in two or more different ways. The grammar as shown in the exploration above is 
        ambiguous as there is more than one way to generate the string, but the language this grammar represents does have a grammar that is not ambiguous. 
      </p>
      <p>
        If we want to force some matching to have precedence, you simply push the items with higher precedence to be matched by rules further down the grammar. 
        Consider <m>CFG_5</m> once again. 
        <tabular>
          <row>
            <cell><m>CFG_5:</m></cell><cell></cell>
          </row>
          <row>
            <cell></cell><cell><m>E \rightarrow E+E | E*E | 0 | 1</m></cell>
          </row>
        </tabular>
        Here, <m>E*E</m> is of lower precedence than <m>E+E</m>, so it can be moved down.
        <tabular>
          <row>
            <cell><m>CFG_{5a}:</m></cell><cell></cell>
          </row>
          <row>
            <cell></cell><cell><m>E \rightarrow E+E | T | 0 | 1</m></cell>
          </row>
          <row>
            <cell></cell><cell><m>T \rightarrow E*E</m></cell>
          </row>
        </tabular>
        The <m>0 | 1</m> also has lower precedence than <m>E+E</m> and <m>E*E</m>, but there needs to be a way to generate those. They can also be given their own
        variable. 
        <tabular>
          <row>
            <cell><m>CFG_{5b}:</m></cell><cell></cell>
          </row>
          <row>
            <cell></cell><cell><m>E \rightarrow E+E | T</m></cell>
          </row>
          <row>
            <cell></cell><cell><m>T \rightarrow E*E | N</m></cell>
          </row>
          <row>
            <cell></cell><cell><m>N \rightarrow 0 | 1</m></cell>
          </row>
        </tabular>
        Using the above grammar, there is now only one way to create the string <m>1+1*0</m>. This is the parse tree: 
        <image source="../generated/latex-image/CFExT3.svg" width="20%">
	      </image>
        This is the only possible way to create the parse tree that generates <m>1+1*0</m> from <m>CFG_{5b}</m> because the "+" must be matched first. 
       </p>
       <p>
         Some languages have only ambiguous grammars. These languages are called <idx>Inherently Ambiguous</idx><term>interherently ambiguous</term>. 
         The language below is an example of an inherently ambiguous language: 
         <me>
           L_6 = \{a^ib^jc^k | i=j \mbox{ or } j=k\}
         </me>
         <m>CFG_6</m> is one possible grammar for <m>L_6</m>: 
      <tabular>
        <row>
          <cell><m>CFG_6:</m></cell><cell></cell>
        </row>
        <row>
          <cell></cell><cell><m>S \rightarrow AU_1 | U_2G</m></cell>
        </row>
        <row>
          <cell></cell><cell><m>A \rightarrow aAb | \epsilon</m></cell>
        </row>
        <row>
          <cell></cell><cell><m>U_1 \rightarrow cU_1 | \epsilon</m></cell>
        </row>
        <row>
          <cell></cell><cell><m>U_2 \rightarrow aU_2 | \epsilon</m></cell>
        </row><row>
          <cell></cell><cell><m>G \rightarrow bGc | \epsilon</m></cell>
        </row>
      </tabular>
      Try to make a parse tree for the string <m>abc</m> as generated by <m>CFG_6</m>. Below are some examples.
      </p>
      <sidebyside width='20%'>
        <image source="../generated/latex-image/CFGExT4a.svg">
	      </image>
        <image source="../generated/latex-image/CFGExT4b.svg">
	      </image>
      </sidebyside>
    </section>
    <exercises xml:id="ch-cfgs-exercises">
      <exercise>
        <statement>
        <p>
          Write a CFG for <m>L_1 = (1+01)^*</m>
        </p>
        </statement>
        <hint>
        <p>
          Consider the OR first. Then consider how to generate the reptition. There are multiple options for a grammar of this language.
        </p>
        </hint>
        <answer>
          <p>
            <tabular>
              <row>
                <cell><m>CFG_1:</m></cell><cell></cell>
              </row>
              <row>
                <cell></cell><cell><m>S \rightarrow SS | 1 |01 | \epsilon</m></cell>
              </row>
            </tabular>
            OR
            <tabular>
              <row>
                <cell><m>CFG_1:</m></cell><cell></cell>
              </row>
              <row>
                <cell></cell><cell><m>S \rightarrow 1S | 01S | \epsilon</m></cell>
              </row>
            </tabular>
            OR
            <tabular>
              <row>
                <cell><m>CFG_1:</m></cell><cell></cell>
              </row>
              <row>
                <cell></cell><cell><m>S_1 \rightarrow U_1S_1 | U_2S_1 | \epsilon</m></cell>
              </row>
              <row>
                <cell></cell><cell><m>U_1 \rightarrow 1</m></cell>
              </row>
              <row>
                <cell></cell><cell><m>U_2 \rightarrow 01</m></cell>
              </row>
            </tabular>
            Are all grammars that can represent <m>L_1</m>.
          </p>
        </answer>
      </exercise>
      <exercise>
        <statement>
          <p>
            Write a CFG for <m>L_2 = (1^*01^*01^*)^*</m>
          </p>
        </statement>
        <answer>
          <p>
            <tabular>
              <row>
                <cell><m>CFG_2:</m></cell><cell></cell>
              </row>
              <row>
                <cell></cell><cell><m>S_2 \rightarrow T0T0T0TS_2 | \epsilon</m></cell>
              </row>
              <row>
                <cell></cell><cell><m>T \rightarrow 1T | \epsilon</m></cell>
              </row>
            </tabular>    
            OR  
            <tabular>
              <row>
                <cell><m>CFG_2:</m></cell><cell></cell>
              </row>
              <row>
                <cell></cell><cell><m>S_2 \rightarrow S_2S_2 | T0T0T | \epsilon</m></cell>
              </row>
              <row>
                <cell></cell><cell><m>T \rightarrow 1T | \epsilon</m></cell>
              </row>
            </tabular>   
            OR  
            <tabular>
              <row>
                <cell><m>CFG_2:</m></cell><cell></cell>
              </row>
              <row>
                <cell></cell><cell><m>S_2 \rightarrow U_30U_30U_3S_2 | \epsilon</m></cell>
              </row>
              <row>
                <cell></cell><cell><m>U_3 \rightarrow 1U_3 | \epsilon</m></cell>
              </row>
            </tabular>  
            Both grammars can represent <m>L_2</m>.    
          </p>
        </answer>
      </exercise>
      <exercise>
        <statement>
          <p>
            Write a CFG for <m>L_1L_2 = (1+01)^*(1^*01^*01^*)^*</m>
          </p>
        </statement>
        <hint>
          <p>
            Lean on past exercises.
          </p>
        </hint>
        <answer>
          <p>
            <tabular>
              <row>
                <cell><m>CFG_3:</m></cell><cell></cell>
              </row>
              <row>
                <cell></cell><cell><m>S_3 \rightarrow S_1S_2</m></cell>
              </row>
            </tabular>            
          </p>
        </answer>
      </exercise>
      <exercise>
        <statement>
          <p>
            Create a CFG for the language below:
            <me>
              L = \{\mbox{all palindromes with } \sigma=\{0,1\}\}
            </me>
            (Palindromes are strings that the same no matter if read backwards for forwards. <m>1011101</m> is an example.)
          </p>
        </statement>
        <answer>
          <p>
            <tabular>
              <row>
                <cell><m>CFG:</m></cell><cell></cell>
              </row>
              <row>
                <cell></cell><cell><m>S \rightarrow 0S0 | 1S1 | 0 | 1 | \epsilon</m></cell>
              </row>
            </tabular>
          </p>
        </answer>
      </exercise>
      <exercise>
        <statement>
          <p>
            Write the language of matching open and closed brackets such as: (),[], and {}.
          </p>
        </statement>
        <hint>
          <p>
            Remember to consider that [(){}] can also take place. 
          </p>
        </hint>
        <answer>
          <p>
            <m>S \rightarrow (S) | [S] | {S} | \epsilon | SS</m>
          </p>
        </answer>
      </exercise>
    </exercises>
    
    <!--
  <xi:include href=".sec-emp-intro.ptx" />
  <xi:include href=".sec-emp-next.ptx" />
  <xi:include href=".sec-emp-conc.ptx" /> 
  -->

</chapter>
