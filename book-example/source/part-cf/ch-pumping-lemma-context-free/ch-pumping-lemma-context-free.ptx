<?xml version='1.0' encoding='utf-8'?>

<chapter xml:id="ch-pumping-lemma-context-free" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Pumping Lemma for Context Free Languages</title>
   <objectives>
    In this chapter you will learn:
     <ol>
       <li>Revisiting Parse Trees and Spotting Loops </li>
       <li>The Pumping Lemma for Context Free Languages</li>
     </ol>
  </objectives>
  <section xml:id="sec-parseTreeRevisit">
    <title>Revisiting Parse Trees and Spotting Loops</title>
    <p>
      In order to understand the Pumping Lemma for Context Free Languages, we need to take a step back and look at some parse trees. 
    </p>
    <exploration>
      <p>
        Consider this CFL below:
        <tabular>
          <row>
            <cell><m>CFG_1:</m></cell><cell></cell>
          </row>
          <row>
            <cell></cell><cell><m>S \rightarrow aSb | ab</m></cell>
          </row>
        </tabular>
        Try creating the parse tree for producing the string <m>aaabbb</m> from this grammar.
      </p>
      <answer>
        <image source="../generated/latex-image/CFGExT4.svg" width='20%'>
	            </image>
      </answer>
      <p>
        That string was able to be generated by a relatively simple parse tree, but the grammar is not in CNF. Try putting the grammar in CNF. 
      </p>
      <answer>
        <tabular>
          <row>
            <cell><m>CFG_1:</m></cell><cell></cell>
          </row>
          <row>
            <cell></cell><cell><m>S_0 \rightarrow NB | AB</m></cell>
          </row>
          <row>
            <cell></cell><cell><m>S \rightarrow NB | AB</m></cell>
          </row>
          <row>
            <cell></cell><cell><m>N \rightarrow AS</m></cell>
          </row>
          <row>
            <cell></cell><cell><m>A \rightarrow a</m></cell>
          </row>
          <row>
            <cell></cell><cell><m>B \rightarrow b</m></cell>
          </row>
        </tabular>
      </answer>
      <p>
        Considering the grammar in CNF, re-make the parse tree that would produce the string <m>aaabbb</m>.
      </p>
      <answer>
        <image source="../generated/latex-image/CFGExT5.svg" width='20%'>
	            </image>
      </answer>
      <p>
        Can you see how the same inner <m>S \rightarrow A</m> and <m>B</m> exists in both parse trees? If that is removed from the middle of the trees, 
        then an <m>S \rightarrow S</m> loop remains. This loop works from <m>S \rightarrow NB \rightarrow ASB \rightarrow AABB</m>. This loop can be removed, 
        or it can be taken as many times as  we like.
      </p>
      <p>
        Here is an example of a string whose <m>S \rightarrow S</m> loop has been removed:
      </p>
      <image source="../generated/latex-image/CFGExT6.svg" width='20%'>
	            </image>
      <p>
        Here is an example of a string whose <m>S \rightarrow S</m> loop has been taken many times:
      </p>
      <image source="../generated/latex-image/CFGExT7.svg" width='20%'>
	            </image>
      <p>
        As it is a loop, the <m>S \rightarrow S</m> loop can be taken an infinite amount of times. 
      </p>
    </exploration>
  </section>
  <section xml:id="sec-plForCFLs">
    <title>The Pumping Lemma for Context Free Languages</title>
    <p>
      The Pumping Lemma for Context Free Languages can be used to prove that a language is not context free. These are the conditions of 
      the Pumping Lemma for Context Free Languages:
      <ul>
        <li>
          <p>
            <m>|vy| > 0</m>
          </p>
        </li>
        <li>
          <p>
            <m>uv^ixy^iz \in L</m>
          </p>
        </li>
        <li>
          <p>
            <m>|vxy| \leq p</m>
          </p>
        </li>
      </ul>
      And the most general proof outline follows below:
      <ol>
        <li>
          <p>
            Assume the language is a CFL
          </p>
        </li>
        <li>
          <p>
            Pick a string <m>s^{(1)}</m>
          </p>
        </li>
        <li>
          <p>
            Try to pump all possible loops and show that none work (stay in the language)
          </p>
        </li>
        <li>
          <p>
            State that the assumption was wrong and <m>L</m> is not a CFL
          </p>
        </li>
      </ol>
      </p>
      <exploration>
        <p>
         The outline of the proof that <m>L_1</m> is not a CFL where <me>
            L_1 = a^nb^nc^n
          </me>
          is below:
          <ol>
            <li>
              <p>
                Assume the language, <m>L</m>, is a CFL and it obeys the Pumping Lemma for Context Free Languages.
              </p>
            </li>
            <li>
              <p>
                A string of length at least <m>p</m> will obey the Pumping Lemma for Context Free Languages. Choose to consider <m>s^{(1)}</m>, where 
                <m>s^{(1)} = a^pb^pc^p</m> and <m>s^{(1)} \in L</m>
              </p>
            </li>
            <li>
              <p>
                When pumping up, <m>a</m>, <m>b</m>, and <m>c</m> must each increase to stay in <m>L</m>. But, because the pumpable part has to be within 
                <m>p</m> symbols, there is no way to include all three. (The <m>c</m>'s are too far away from the <m>a</m>'s)
              </p>
            </li>
            <li>
              <p>
                Thus, our assumpiton was wrong, <m>L</m> must not be a CFL by contradiction.
              </p>
            </li>
          </ol>
        </p>
      </exploration>
      <p>
        Let's look at another example. 
      </p>
      <exploration>
        <p>
          Consider the following language:
          <me>
            L_2 = \{a^ib^jc^k | \mbox{ where } i = j \mbox{ and } j \mbox{ less than } k \}
          </me>
          We will now prove that <m>L_2</m> is not context free.
        </p>
        <p>
          Proof.
        </p>
        <p>
          Assume that <m>L_2</m> is a CFL. <m>L_2</m> can be rewritten as: 
          <me>
            L_2 = \{a^ib^ic^k | \mbox{ where } i \mbox{ less than } k \}
          </me> 
          <ol>
            <li>
              <p>
                Consider <m>s^{(1)} = a^Pb^Pc^{P+1}</m> where <m>s^{(1)} \in L_2</m>.
              </p>
            </li>
            <li>
              <p>
                Since <m>s^{(1)}</m> is of length at least <m>p</m>, it should obey the Pumping Lemma for Context Free Languages.
              </p>
            </li>
            <li>
              <ul>
                <li>
                  <p>
                    Consider a section of <m>s^{(1)}</m>, a section made up of the last <m>a</m> and the first two <m>b</m>'s.
          By pumping this section up by one, a new string, <m>s^{(2)} = a^{P+1}b^{P+1}c^{P+1}</m> is created, but this string is no longer a part of <m>L_2</m>. 
                  </p>
                </li>
                <li>
                  <p>
                    Consider another section of <m>s^{(1)}</m>, one that is made up of the last <m>b</m> and first two <m>c</m>'s. Pumping this string down by one creates
          the new string, <m>s^{(0)} = a^Pb^{P-1}c^P</m>, but this string is no longer in <m>L_2</m>.
                  </p>
                </li>
              </ul>
            </li>
            <li>
              <p>
                Therefore, by contradiction, <m>L_2</m> is not a CFL.
              </p>
            </li>
          </ol>
        </p>
      </exploration>
      <exploration>
        <p>
          The most difficult part of proving that any CFL is context free using the Pumping Lemma, is finding the best string to use as your example. 
          Consider the following language:
          <me>
            L_3 = \{a^nb^nc^md^me^m\}
          </me>
          What is a string that we can use to prove <m>L</m> is a CFL using the Pumping Lemma?
        </p> 
        <answer>
          <m>s^{(1)} = c^pd^pe^p</m>
        </answer>
        <p>
          Was that string unexpected? Were you expecting something closer to:
          <me>
            s^{(1)} = a^pb^pc^pd^pe^p
          </me>
          That string will not work for the Pumping Lemma for CFLs.
        </p>
        <p>
          Another example of this phenomrnon occures when trying to choose a string to pump from the following language: 
          <me>
            L_4 = \{a^ib^jc^k | i=j \mbox{ and } j\leq k\}
          </me>
          The string, <m>s^{(1)}=a^pb^pc^p</m> will not allow us to show that <m>L_4</m> is not CFL as using a singular <m>c</m> as the <m>y</m> portion 
          of the pumpable string would be able to be pumped and stay in the language.
        </p>
      </exploration>
  </section>
  <exercises>
    <exercise>
      <statement>
        <p>
          Consider <m>L_5</m>. Is it a CFL? Find a string that can be used to prove or disprove it using the Pumping Lemma for Context Free Languages.
          <me>
            L_5 = \{ww | w \mbox{ is any binary string}\}
          </me>
        </p>
      </statement>
      <hint>
        <p>
          If you are having trouble picking a useful string, consider using the compliment of <m>L_5</m>. 
          <me>
            \overline{L_5} = \{(0+1)^* \mbox{ that isn't "ww"}\}
          </me>
        </p>
      </hint>
      <answer>
        <p>
          A string that could be used is <m>s^{(1)} = 0^p1^p00^p1^p</m>.
        </p>
      </answer>
    </exercise>
    <exercise>
      <statement>
        <p>
          Come up with a language not covered in our course materials that is context free but not regular. Prove it is context free and then proive it isn't regular.
        </p>
      </statement>
    </exercise>
    <exercise>
      <statement>
        <p>
          Prove that the following language is not context free using the pumping lemma for context free languages.
          <me>
            L_1 = \{ww | w \mbox{ is any binary string}\}
          </me>
        </p>
      </statement>
      <hint>
        <p>
          Includes strings: 
          <ul>
            <li>
              <p>
                00
              </p>
            </li>
            <li>
              <p>
                11
              </p>
            </li>
            <li>
              <p>
                1010
              </p>
            </li>
            <li>
              <p>
                000000
              </p>
            </li>
            <li>
              <p>
                110110
              </p>
            </li>
          </ul>
        </p>
      </hint>
    </exercise>
    <exercise>
      <statement>
        <p>
          Prove that the following language is not context free using the pumping lemma for context free languages. 
          <me>
            L_2 = \{w*1000=w000| w \mbox{ is any binary string}\}
          </me>
          This language simulates equations that multiply by 8.
        </p>
      </statement>
      <hint>
        <p>
          Includes strings: 
          <ul>
            <li>
              <p>
                1*1000=1000
              </p>
            </li>
            <li>
              <p>
                1010*1000=1010000
              </p>
            </li>
            <li>
              <p>
                1000*1000=1000000
              </p>
            </li>
          </ul>
        </p>
      </hint>
    </exercise>
    <exercise>
      <statement>
        <p>
          Stacks tend to be useful in arithmetic. You might still be able to find HP calculators that use a stack based input. Let's prove simply *add 1* can be a 
          context free language under certain specific configurations. To make this work, the result will be in reverse order. Thus, strings in the language might
          be: <m>1011+1=0011</m> or even <m>11+1=100</m>.
        </p>
        <p>
          It is helpful to treat the latter as a special case. 
        </p>
        <p>
          Write a CFG and PDA for this language:
          <me>
            L = \{w+1=z | w \mbox{ is any binary string and } z \mbox{  is } (w+1) \mbox{ in reverse when } w \mbox{ is treated as a binary number}\}
          </me>
        </p>
        <tabular>
          <row>
            <cell right="minor">
              <tabular>
                <row>
                  <cell>1</cell><cell>0</cell><cell>1</cell><cell>1</cell>
                </row>
                <row>
                  <cell bottom="minor" >+</cell><cell bottom="minor"> </cell><cell bottom="minor"> </cell><cell bottom="minor" >1</cell>
                </row>
                <row>
                  <cell >1</cell><cell>1</cell><cell>0</cell><cell>0</cell>
                </row>
              </tabular>
            </cell>
            <cell right="minor">
              <tabular>
                <row>
                  <cell></cell><cell>1</cell><cell>1</cell>
                </row>
                <row>
                  <cell bottom="minor"></cell><cell bottom="minor">+</cell><cell bottom="minor" >1</cell>
                </row>
                <row>
                  <cell>1</cell><cell>0</cell><cell>0</cell>
                </row>
              </tabular>
            </cell>
            <cell>
              <tabular>
                <row>
                  <cell>1</cell><cell>0</cell><cell>1</cell><cell>0</cell>
                </row>
                <row>
                  <cell bottom="minor" >+</cell><cell bottom="minor"> </cell><cell bottom="minor"> </cell><cell bottom="minor" >1</cell>
                </row>
                <row>
                  <cell >1</cell><cell>0</cell><cell>1</cell><cell>1</cell>
                </row>
              </tabular>
            </cell>
          </row>
          <row>
            <cell right="minor"><image source="../generated/latex-image/EQ1.svg" width='70%'>
	            </image></cell>
            <cell right="minor"><image source="../generated/latex-image/EQ2.svg" width='70%'>
	            </image></cell>
            <cell><image source="../generated/latex-image/EQ3.svg" width='70%'>
	            </image></cell>
          </row>
        </tabular>
      </statement>
    </exercise>
    <exercise>
      <statement>
        <p>
          Use the PL for CFLs to prove the following language is not a Context Free Language: 
        </p>
        <me>
          L = \{\star^n \bigcirc ^k \star^n \bigcirc^k\}
        </me>
        
      </statement>
    </exercise>
    <exercise>
      <statement>
        <p>
          Use the pumping lemma for CFLs to prove the following language is not a CFL:
        </p>
        <me>
          L = \{a^*b^nc^*d^ne^*f^ng^*\}
        </me>
        
      </statement>
    </exercise>
    <exercise>
      <statement>
        <p>
          Use the pumping lemma for CFLs to prove the following languge is not a CFL:
        </p>
        <me>
          L = \{\alpha ^i\beta ^i\gamma ^i| i \> j \> k\}
        </me>
      </statement>
    </exercise>
    <exercise>
      <statement>
        <p>
          Use the pummping lemma for CFLs to prove the following language is 
          not a CFL.
        </p>
        <me>
          L = \{\star ^i\triangle^j\square^i | i \ngeq j\}
        </me>
        
      </statement>
    </exercise>
  </exercises>
    <!--
  <xi:include href=".sec-emp-intro.ptx" />
  <xi:include href=".sec-emp-next.ptx" />
  <xi:include href=".sec-emp-conc.ptx" /> 
  -->

</chapter>
